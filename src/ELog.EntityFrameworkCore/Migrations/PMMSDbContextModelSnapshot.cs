// <auto-generated />
using System;
using ELog.EntityFrameworkCore.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ELog.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(PMMSDbContext))]
    partial class PMMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Editions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasColumnType("varchar(1024) CHARACTER SET utf8mb4")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ServiceName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("Permissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserLinkId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("TenancyName")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("UserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("UserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint unsigned");

                    b.Property<short>("TryCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("BackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityFullName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.HasIndex("EntityFullName", "DynamicPropertyId", "TenantId")
                        .IsUnique();

                    b.ToTable("DynamicEntityProperties");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DynamicEntityPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DynamicEntityPropertyId");

                    b.ToTable("DynamicEntityPropertyValues");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("InputType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Permission")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyName", "TenantId")
                        .IsUnique();

                    b.ToTable("DynamicProperties");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.ToTable("DynamicPropertyValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("EntityChangeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasColumnType("varchar(48) CHARACTER SET utf8mb4")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasColumnType("varchar(192) CHARACTER SET utf8mb4")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("EntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("EntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("EntityChangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasColumnType("varchar(192) CHARACTER SET utf8mb4")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("EntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("LanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("TenantIds")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("NotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnType("char(36)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4")
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("OrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("OrganizationUnitRoles");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("WebhookEvents");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Response")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WebhookSubscriptionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.ToTable("WebhookSendAttempts");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Headers")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookUri")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Webhooks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("WebhookSubscriptions");
                });

            modelBuilder.Entity("ELog.Core.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ELog.Core.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("AuthenticationSource")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLockout")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("PasswordResetTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PasswordStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<long?>("ReportingManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ModeId");

                    b.HasIndex("PlantId");

                    b.HasIndex("ReportingManagerId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ELog.Core.Entities.ActivityMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ActivityName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("SubModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ActivityMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.ApprovalLevelMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("LevelCode")
                        .HasColumnType("int");

                    b.Property<string>("LevelName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ApprovalLevelMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.ApprovalStatusMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatus")
                        .IsUnique();

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ApprovalStatusMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.ApprovalUserModuleMappingMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("SubModuleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ApprovalUserModuleMappingMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.AreaMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("SubPlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Zone")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubPlantId");

                    b.ToTable("AreaMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.AreaUsageListLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AreaUsageHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckpointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscrepancyRemark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AreaUsageHeaderId");

                    b.HasIndex("CheckpointId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("AreaUsageListLog");
                });

            modelBuilder.Entity("ELog.Core.Entities.AreaUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityID")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicalId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("OperatorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StopTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("AreaUsageLog");
                });

            modelBuilder.Entity("ELog.Core.Entities.CageLabelPrinting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CageLabelBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("CubcileCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CubicleID")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DispensingBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DispensingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("NoOfContainer")
                        .HasColumnType("int");

                    b.Property<int?>("PrintCount")
                        .HasColumnType("int");

                    b.Property<int?>("PrinterID")
                        .HasColumnType("int");

                    b.Property<int>("ProcessorderID")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CageLabelPrinting");
                });

            modelBuilder.Entity("ELog.Core.Entities.CalenderMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CalenderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HolidayName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("HolidayTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("SubPlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("HolidayTypeId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CalenderMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.CalibrationFrequencyMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("CalibrationCriteria")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CalibrationLevel")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<float?>("MaximumValue")
                        .HasColumnType("float");

                    b.Property<float?>("MinimumValue")
                        .HasColumnType("float");

                    b.Property<float?>("StandardWeightValue")
                        .HasColumnType("float");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("WeighingMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("FrequencyTypeId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("WeighingMachineId");

                    b.ToTable("CalibrationFrequencyMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.CalibrationStatusMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CalibrationStatusMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.CalibrationTestStatusMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CalibrationTestStatusMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.ChecklistTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ChecklistName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ChecklistTypeCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("SubModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("SubPlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("SubPlantId");

                    b.ToTable("ChecklistTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.CheckpointMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcceptanceValue")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("CheckpointName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("CheckpointTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("InspectionChecklistId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ModeId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("ValueTag")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("InspectionChecklistId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CheckpointMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.CheckpointTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CheckpointTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.CompRecipeTransDetlMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Operation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RecipeTransactiondetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("RecipeTransactiondetailId");

                    b.ToTable("CompRecipeTransDetlMapping");
                });

            modelBuilder.Entity("ELog.Core.Entities.Consumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("NoOfContainer")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("Consumption");
                });

            modelBuilder.Entity("ELog.Core.Entities.ConsumptionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ConsumptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItemNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MaterialBarocdeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsumptionId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ConsumptionDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.CountryMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryName")
                        .IsUnique();

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CountryMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicalRecipeTranDetlMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicalId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Operation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RecipeTransactiondetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CubicalId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("RecipeTransactiondetailId");

                    b.ToTable("CubicalRecipeTranDetlMapping");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleAssignmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("CubicleAssignmentHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("InspectionLotId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessOrderMaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CubicleAssignmentHeaderId");

                    b.HasIndex("CubicleId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("InspectionLotId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ProcessOrderId");

                    b.HasIndex("ProcessOrderMaterialId");

                    b.HasIndex("StatusId");

                    b.ToTable("CubicleAssignmentDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleAssignmentHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CubicleAssignmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("GroupStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GroupStatusId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CubicleAssignmentHeader");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleAssignmentWIP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicleBarcodeId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EquipmentBarcodeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CubicleAssignmentWIP");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleCleaningCheckpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicleCleaningTransactionId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CheckPointId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CubicleCleaningTransactionId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CubicleCleaningCheckpoints");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleCleaningDailyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CleaningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CubicleId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("CubicleCleaningDailyStatus");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleCleaningTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CleanerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CleaningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoneBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StopTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("VerifierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CubicleId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("CubicleCleaningTransactions");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleCleaningTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("CubicleCleaningTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("CubicleCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("SLOCId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PlantId");

                    b.HasIndex("SLOCId");

                    b.ToTable("CubicleMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.DepartmentMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("SubPlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubPlantId");

                    b.ToTable("DepartmentMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.DesignationMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("DesignationMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.DeviceMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceId")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Make")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModeId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("SubPlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CubicleId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ModeId");

                    b.ToTable("DeviceMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.DeviceTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("DeviceTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.DispatchDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Batch")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HUCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("NoOfPacks")
                        .HasColumnType("int");

                    b.Property<string>("OBD")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PalletBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PalletCount")
                        .HasColumnType("int");

                    b.Property<int?>("PickingId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PutawayId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TransportName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VehicleNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isPicked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("DispatchDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.DispensingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CheckedById")
                        .HasColumnType("int");

                    b.Property<string>("ContainerMaterialBarcode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("ContainerNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DispenseBarcode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("DispensingHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("DoneBy")
                        .HasColumnType("int");

                    b.Property<float?>("GrossWeight")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGrossWeight")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<float?>("NetWeight")
                        .HasColumnType("float");

                    b.Property<int>("NoOfContainers")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfPacks")
                        .HasColumnType("int");

                    b.Property<bool>("Printed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SAPBatchNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("SamplingTypeId")
                        .HasColumnType("int");

                    b.Property<float?>("TareWeight")
                        .HasColumnType("float");

                    b.Property<int?>("UnitOfMeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("WeighingMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("DispensingHeaderId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SamplingTypeId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.HasIndex("WeighingMachineId");

                    b.ToTable("DispensingDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.DispensingHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CheckedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DoneBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("InspectionLotId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialCodeId")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<int>("RLAFId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("InspectionLotId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ProcessOrderId");

                    b.HasIndex("RLAFId");

                    b.HasIndex("StatusId");

                    b.ToTable("DispensingHeaders");
                });

            modelBuilder.Entity("ELog.Core.Entities.DispensingPrintDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int?>("DispensingDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsController")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DispensingDetailId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("DispensingPrintDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("CubicleAssignmentHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("Cubicleid")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("GroupId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CubicleAssignmentHeaderId");

                    b.HasIndex("Cubicleid");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("EquipmentAssignments");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentCleaningCheckpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EquipmentCleaningTransactionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EquipmentCleaningTransactionId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("EquipmentCleaningCheckpoints");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentCleaningStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CleaningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("EquipmentCleaningStatus");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentCleaningTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CleanerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CleaningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CleaningTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoneBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StopTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("VerifierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CleaningTypeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("EquipmentCleaningTransactions");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentCleaningTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("EquipmentCleaningTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alias")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CleanHoldTime")
                        .HasColumnType("int");

                    b.Property<int?>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfInstallation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfProcurement")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EquipmentCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("EquipmentModel")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsMaintenanceRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPortable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaintenanceScheduleDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("NetworkIPAddress")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("NetworkIPPort")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("SLOCId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SupportExpiresOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("VendorDocumentNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("VendorName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PlantId");

                    b.HasIndex("SLOCId");

                    b.ToTable("EquipmentMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("EquipmentTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EquipmentBracodeId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("OperatorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProcessBarcodeId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("EquipmentUsageLog");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentUsageLogList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CheckpointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscrepancyRemark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("EquipmentUsageHeaderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CheckpointId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EquipmentUsageHeaderId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("EquipmentUsageLogList");
                });

            modelBuilder.Entity("ELog.Core.Entities.FgPicking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Batch")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HUCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LocationBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfPacks")
                        .HasColumnType("int");

                    b.Property<string>("OBD")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PalletBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PalletCount")
                        .HasColumnType("int");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ShipperCount")
                        .HasColumnType("int");

                    b.Property<int?>("SuggestedLocationId")
                        .HasColumnType("int");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isPicked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("FgPicking");
                });

            modelBuilder.Entity("ELog.Core.Entities.FgPutAway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HUCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PalletBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PalletCount")
                        .HasColumnType("int");

                    b.Property<int?>("PalletId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isPicked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("FgPutAway");
                });

            modelBuilder.Entity("ELog.Core.Entities.FormApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormApprovalData");
                });

            modelBuilder.Entity("ELog.Core.Entities.FrequencyTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FrequencyName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("FrequencyTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscrepancyRemark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("GRNHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("MfgBatchNoId")
                        .HasColumnType("int");

                    b.Property<float>("NoOfContainer")
                        .HasColumnType("float");

                    b.Property<float>("QtyPerContainer")
                        .HasColumnType("float");

                    b.Property<string>("QtyPerContainerInDecimal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SAPBatchNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<float>("TotalQty")
                        .HasColumnType("float");

                    b.Property<string>("TotalQtyInDecimal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GRNHeaderId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MfgBatchNoId");

                    b.ToTable("GRNDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GRNNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("GRNPostingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("GRNHeaders");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNMaterialLabelPrintingContainerBarcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float?>("BalanceQuantity")
                        .HasColumnType("float");

                    b.Property<int>("ContainerNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GRNDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("GRNMaterialLabelPrintingHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("GRNQtyDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsLoosedContainer")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialLabelContainerBarCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<float?>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GRNDetailId");

                    b.HasIndex("GRNMaterialLabelPrintingHeaderId");

                    b.HasIndex("GRNQtyDetailId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("GRNMaterialLabelPrintingContainerBarcodes");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNMaterialLabelPrintingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GRNMaterialLabelPrintingHeaderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsController")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("int");

                    b.Property<string>("RangePrint")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GRNMaterialLabelPrintingHeaderId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PrinterId");

                    b.ToTable("GRNMaterialLabelPrintingDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNMaterialLabelPrintingHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GRNDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("PackDetails")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GRNDetailId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("GRNMaterialLabelPrintingHeaders");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNQtyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscrepancyRemark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("GRNDetailId")
                        .HasColumnType("int");

                    b.Property<string>("IsDamaged")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<float>("NoOfContainer")
                        .HasColumnType("float");

                    b.Property<float>("QtyPerContainer")
                        .HasColumnType("float");

                    b.Property<float>("TotalQty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GRNDetailId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("GRNQtyDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.GateEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GatePassNo")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("GateEntry");
                });

            modelBuilder.Entity("ELog.Core.Entities.GateMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AliasName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GateCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PlantId");

                    b.ToTable("GateMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.HandlingUnitMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HUCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("HandlingUnitTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("HandlingUnitTypeId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PlantId");

                    b.ToTable("HandlingUnitMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.HandlingUnitTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HandlingUnitName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("HandlingUnitTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.HolidayTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HolidayType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("HolidayTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.InProcessLabelDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContainerBarcodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("GrossWeight")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrint")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ischeck")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<float?>("NetWeight")
                        .HasColumnType("float");

                    b.Property<string>("NoOfContainer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessLabelBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ScanBalance")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ScanBalanceId")
                        .HasColumnType("int");

                    b.Property<float?>("TareWeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("InProcessLabelDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.InspectionChecklistMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ChecklistCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("ChecklistTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FormatNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ModeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("SubModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("InspectionChecklistMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.InspectionLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InspectionLotNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("InspectionLot");
                });

            modelBuilder.Entity("ELog.Core.Entities.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BillofLanding")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeliveryNote")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LRDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LRNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ManufacturerCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseOrderNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("TransporterName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("VendorBatchNo")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("VendorCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("purchaseOrderDeliverSchedule")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.IssueToProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ArNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DispensedQty")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DispensingHeaderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItemNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialIssueNoteNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MvtType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProcessOrderNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Product")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductBatch")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Storage_location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("IssueToProductions");
                });

            modelBuilder.Entity("ELog.Core.Entities.LabelPrintPacking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContainerBarcodeId")
                        .HasColumnType("int");

                    b.Property<int>("ContainerCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrint")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("PackingLabelBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("LabelPrintPacking");
                });

            modelBuilder.Entity("ELog.Core.Entities.LineClearanceCheckpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("LineClearanceTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CheckPointId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("LineClearanceTransactionId");

                    b.ToTable("LineClearanceCheckpoints");
                });

            modelBuilder.Entity("ELog.Core.Entities.LineClearanceTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ClearanceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StopTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CubicleId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("LineClearanceTransactions");
                });

            modelBuilder.Entity("ELog.Core.Entities.Loading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Batch")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HUCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("NoOfPacks")
                        .HasColumnType("int");

                    b.Property<string>("OBD")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PalletBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PalletCount")
                        .HasColumnType("int");

                    b.Property<int?>("PickingId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PutawayId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TransportName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VehicleNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isPicked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("Loading");
                });

            modelBuilder.Entity("ELog.Core.Entities.LocationMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("LocationCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<decimal?>("LocationTemperature")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("LocationTemperatureUL")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("SLOCType")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("StorageLocationType")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TemperatureUnit")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Zone")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PlantId");

                    b.ToTable("LocationMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.LogFormHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("LogFormHistory");
                });

            modelBuilder.Entity("ELog.Core.Entities.LogoMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("longblob");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("LogoMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float?>("BalanceQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ItemDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemNo")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ManufacturerCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<float>("OrderQuantity")
                        .HasColumnType("float");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseOrderNo")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasurement")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialBatchDispensingContainerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerBarCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ContainerPickingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IsVerified")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("MaterialBatchDispensingHeaderId")
                        .HasColumnType("int");

                    b.Property<float?>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("SAPBatchNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("verifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("MaterialBatchDispensingHeaderId");

                    b.ToTable("MaterialBatchDispensingContainerDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialBatchDispensingHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BatchPickingStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("CubicleCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GroupCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("MaterialBatchDispensingHeaderType")
                        .HasColumnType("int");

                    b.Property<string>("MaterialCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("PickingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SAPBatchNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("MaterialBatchDispensingHeaders");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialChecklistDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CheckPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscrepancyRemark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaterialRelationId")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CheckPointId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("MaterialRelationId");

                    b.ToTable("MaterialChecklistDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialConsignmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ManufacturedBatchNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ManufacturedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MaterialRelationId")
                        .HasColumnType("int");

                    b.Property<float?>("QtyAsPerInvoice")
                        .HasColumnType("float");

                    b.Property<string>("QtyAsPerInvoiceInDecimal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RetestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SequenceId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitofMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("MaterialRelationId");

                    b.ToTable("MaterialConsignmentDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialDamageDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaterialConsignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialRelationId")
                        .HasColumnType("int");

                    b.Property<float?>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("QuantityInDecimal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("SequenceId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitofMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("MaterialConsignmentId");

                    b.HasIndex("MaterialRelationId");

                    b.ToTable("MaterialDamageDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialDestruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ARNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPostedToSAP")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialContainerBarCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MovementType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UnitOfMeasurement")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("MaterialDestructions");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialInspectionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GateEntryId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("TransactionStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GateEntryId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("MaterialInspectionHeaders");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialInspectionRelationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChecklistTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("InspectionChecklistId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("MaterialHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistTypeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("InspectionChecklistId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("MaterialHeaderId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("MaterialInspectionRelationDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BaseUOM")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ConversionUOM")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Denominator")
                        .HasColumnType("float");

                    b.Property<int?>("Flag")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("MaterialDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialType")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<float>("Numerator")
                        .HasColumnType("float");

                    b.Property<string>("TempStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("MaterialMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("GrossWeight")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrint")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ischeck")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialReturnProcessLabelBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("NetWeight")
                        .HasColumnType("float");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessOrderId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ScanBalanceId")
                        .HasColumnType("int");

                    b.Property<string>("ScanBalanceNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("TareWeight")
                        .HasColumnType("float");

                    b.Property<int>("UOMId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("MaterialReturnDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialRteturnDetailsSAP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ARNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItemNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialDocumentNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialDocumentYear")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("Qty")
                        .HasColumnType("float");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("MaterialReturnDetailsSAP");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialTransferTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("TransferType")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("MaterialTransferTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("ELog.Core.Entities.ModeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsController")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ModeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.ModuleMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ModuleMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.ModuleSubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("SubModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SubModuleId");

                    b.ToTable("ModuleSubModule");
                });

            modelBuilder.Entity("ELog.Core.Entities.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Repeat")
                        .HasColumnType("int");

                    b.Property<int>("assign_email")
                        .HasColumnType("int");

                    b.Property<int>("assign_mobile")
                        .HasColumnType("int");

                    b.Property<string>("assign_roles")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("log_Id")
                        .HasColumnType("int");

                    b.Property<int>("notification_type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("ELog.Core.Entities.OBDDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ARNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItemNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OBD")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductDesc")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("Qty")
                        .HasColumnType("float");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UOM")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("OBDDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.PRNEntryMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("PRNFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("SubModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("PRNEntryMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.PackingMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContainerCount")
                        .HasColumnType("int");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("PackingMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.PalletMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CartonBarcodeId")
                        .HasColumnType("int");

                    b.Property<string>("Carton_barcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("PalletBarcodeId")
                        .HasColumnType("int");

                    b.Property<string>("Pallet_Barcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("PalletMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.Palletization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerBarCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<int>("ContainerNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GRNDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUnloaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("PalletId")
                        .HasColumnType("int");

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SAPBatchNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GRNDetailId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PalletId");

                    b.ToTable("Palletizations");
                });

            modelBuilder.Entity("ELog.Core.Entities.PermissionMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("PermissionMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.PickingMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ContainerCount")
                        .HasColumnType("int");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Stage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SuggestedLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("PickingMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.PlantMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("GS1Prefix")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("License")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("MasterPlantId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PlantId")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("PlantTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("TaxRegistrationNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("MasterPlantId");

                    b.HasIndex("StateId");

                    b.ToTable("PlantMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.PostWIPDataToSAP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("InProcessLabelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("PostWIPDataToSAP");
                });

            modelBuilder.Entity("ELog.Core.Entities.ProcessOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReservationNo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IssueIndicator")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("IssueQuantityUOM")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProcessOrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessOrderNo")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ProcessOrderType")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ProcessOrders");
                });

            modelBuilder.Entity("ELog.Core.Entities.ProcessOrderAfterRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPicking")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProcessOrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessOrderNo")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ProcessOrderType")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("ProductCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("TecoFlag")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ProcessOrderAfterRelease");
                });

            modelBuilder.Entity("ELog.Core.Entities.ProcessOrderMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ARNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("BatchNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("InspectionLotId")
                        .HasColumnType("int");

                    b.Property<string>("InspectionLotNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ItemDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemNo")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<float?>("OrderQuantity")
                        .HasColumnType("float");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessOrderNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("RetestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasurement")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UnitOfMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("InspectionLotId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ProcessOrderId");

                    b.ToTable("ProcessOrderMaterials");
                });

            modelBuilder.Entity("ELog.Core.Entities.ProcessOrderMaterialAfterRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ARNO")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentStage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItemNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LotNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NextStage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessOrderNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("Quantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("RetestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ProcessOrderMaterialAfterRelease");
                });

            modelBuilder.Entity("ELog.Core.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ManufacturerCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseOrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PurchaseOrderNo")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PlantId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ELog.Core.Entities.PutAwayBinToBinTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<int>("ContainerNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUnloaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialTransferTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PalletId")
                        .HasColumnType("int");

                    b.Property<string>("SAPBatchNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MaterialTransferTypeId");

                    b.HasIndex("PalletId");

                    b.ToTable("PutAwayBinToBinTransfer");
                });

            modelBuilder.Entity("ELog.Core.Entities.Putaway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessOrderNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductCodeId")
                        .HasColumnType("int");

                    b.Property<string>("StorageLocation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("Putaway");
                });

            modelBuilder.Entity("ELog.Core.Entities.RecipeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocVersion")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ProductName")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ProductNo")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("RecipeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.RecipeTransactionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Component")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("InProcessSamplingRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLebalPrintingRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSamplingReq")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerificationReq")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWeightRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NextOperation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Operation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RecipeNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RecipeTransactionHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Stage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("RecipeTransactionHeaderId");

                    b.ToTable("RecipeTransactionDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.RecipeTransactionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalRemarks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovedLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RecipeNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("RejectedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("RecipeTransactionHeader");
                });

            modelBuilder.Entity("ELog.Core.Entities.RecipeWiseProcessOrderMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeTransHdrId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("RecipeWiseProcessOrderMapping");
                });

            modelBuilder.Entity("ELog.Core.Entities.ReportConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ReportSettings")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SubModuleId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubModuleId");

                    b.ToTable("ReportConfiguration");
                });

            modelBuilder.Entity("ELog.Core.Entities.ReturnToVendorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerMaterialBarcode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<float?>("Qty")
                        .HasColumnType("float");

                    b.Property<int?>("ReturnToVendorHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("UOM")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ReturnToVendorHeaderId");

                    b.ToTable("ReturnToVendorDetail");
                });

            modelBuilder.Entity("ELog.Core.Entities.ReturnToVendorHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ARNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialDocumentNo")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<float?>("Qty")
                        .HasColumnType("float");

                    b.Property<string>("SAPBatchNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UOM")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("ReturnToVendorHeader");
                });

            modelBuilder.Entity("ELog.Core.Entities.RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ModuleSubModuleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ModuleSubModuleId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPGRNPosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bill_of_lading")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Delivery_note_no")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ExpDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GRNNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InspectionLotNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LRDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LRNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MfgBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MfgDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NetQty")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NextInspectionDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NoOfCases")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("POLineItem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PurchaseOrder")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Storage_location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TransporterName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Vehicle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VendorBatch")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VendorCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SAPGRNPosting");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPPlantMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GS1Prefix")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("License")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PlantCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TaxRegNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SAPPlantMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPProcessOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ARNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<decimal>("BaseQty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("BaseUOM")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentStage")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DispensingQty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DispensingUOM")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReservationNo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItemNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NextStage")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Plant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ProcessOrderNo")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ProductBatchNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<decimal>("ReqDispensedQty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("StorageLocation")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("UOM")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SAPProcessOrders");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPProcessOrderReceivedMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ItemDescription")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItemNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<decimal?>("OrderQty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("PODate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PONo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Plant")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("UOM")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("VendorName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SAPProcessOrderReceivedMaterials");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPQualityControlDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BatchStockStatus")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InspectionlotNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MovementType")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ReleasedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("ReleasedQty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("RetestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SAPQualityControlDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPReturntoMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LineItemNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaterialDescription")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialDocumentNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialDocumentYear")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("UOM")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SAPReturntoMaterial");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPUOMMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SAPUOMMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.SampleDestruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerMaterialBarcode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("GrossWeight")
                        .HasColumnType("float");

                    b.Property<int?>("InspectionLotId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<float?>("NetWeight")
                        .HasColumnType("float");

                    b.Property<int?>("NoOfPacks")
                        .HasColumnType("int");

                    b.Property<string>("SAPBatchNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<float?>("TareWeight")
                        .HasColumnType("float");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitOfMeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("WeighingMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.HasIndex("WeighingMachineId");

                    b.ToTable("SampleDestructions");
                });

            modelBuilder.Entity("ELog.Core.Entities.SamplingTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SamplingTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.StageOutDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("BalanceQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialContainerBarcode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("SAPBatchNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("StageOutHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StageOutHeaderId");

                    b.ToTable("StageOutDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.StageOutHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("InspectionLotId")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CubicleId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("StageOutHeaders");
                });

            modelBuilder.Entity("ELog.Core.Entities.StandardWeightBoxMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("StandardWeightBoxId")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("SubPlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubPlantId");

                    b.ToTable("StandardWeightBoxMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.StandardWeightMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<float?>("Capacity")
                        .HasColumnType("float");

                    b.Property<string>("CapacityinDecimal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StampingDoneOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StampingDueOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StandardWeightBoxMasterId")
                        .HasColumnType("int");

                    b.Property<string>("StandardWeightId")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("SubPlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitOfMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StandardWeightBoxMasterId");

                    b.HasIndex("SubPlantId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("StandardWeightMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.StateMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("StateMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.StatusMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("SubModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SubModuleId");

                    b.ToTable("StatusMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.SubModuleMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsApprovalRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsApprovalWorkflowRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int?>("SubModuleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubModuleTypeId");

                    b.ToTable("SubModuleMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.SubModuleTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("SubModuleType")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SubModuleTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.TransactionStatusMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("TransactionStatusMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.UnitOfMeasurementMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ConversionUOM")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UOMCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("UnitOfMeasurement")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("UnitOfMeasurementTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("UnitOfMeasurementTypeId");

                    b.ToTable("UnitOfMeasurementMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.UnitOfMeasurementTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("UnitOfMeasurementTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("UnitOfMeasurementTypeMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.UserPlants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlants");
                });

            modelBuilder.Entity("ELog.Core.Entities.VehicleInspectionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CheckpointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscrepancyRemark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleInspectionHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckpointId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("VehicleInspectionHeaderId");

                    b.ToTable("VehicleInspectionDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.VehicleInspectionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChecklistTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GateEntryId")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionChecklistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistTypeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("GateEntryId");

                    b.HasIndex("InspectionChecklistId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("VehicleInspectionHeaders");
                });

            modelBuilder.Entity("ELog.Core.Entities.WIPLineClearanceCheckpoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("LineClearanceTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("LineClearanceTransactionId");

                    b.ToTable("WIPLineClearanceCheckpoints");
                });

            modelBuilder.Entity("ELog.Core.Entities.WIPLineClearanceTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ChecklistTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClearanceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicleBarcodeId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EquipmentBarcodeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StopTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("WIPLineClearanceTransaction");
                });

            modelBuilder.Entity("ELog.Core.Entities.WIPMaterialVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CageBarcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CageBarcodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CubicleId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("NoOfCage")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("WIPMaterialVerification");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibratedLatestMachineDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastCalibrationTestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("WMCalibrationHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("WeighingMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("WMCalibrationHeaderId");

                    b.HasIndex("WeighingMachineId");

                    b.ToTable("WMCalibratedLatestMachineDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationCheckpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CheckPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscrepancyRemark")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("WMCalibrationHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckPointId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("WMCalibrationHeaderId");

                    b.ToTable("WMCalibrationCheckpoints");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationStatusId")
                        .HasColumnType("int");

                    b.Property<double>("CapturedWeight")
                        .HasColumnType("double");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoneBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("SpriritLevelBubble")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<int?>("WMCalibrationHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationLevelId");

                    b.HasIndex("CalibrationStatusId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StandardWeightBoxId");

                    b.HasIndex("WMCalibrationHeaderId");

                    b.ToTable("WMCalibrationDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationDetailWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CapturedWeightKeyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("KeyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("StandardWeightId")
                        .HasColumnType("int");

                    b.Property<int?>("WMCalibrationDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("WMCalibrationEccentricityTestId")
                        .HasColumnType("int");

                    b.Property<int?>("WMCalibrationLinearityTestId")
                        .HasColumnType("int");

                    b.Property<int?>("WMCalibrationRepeatabilityTestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("StandardWeightId");

                    b.HasIndex("WMCalibrationDetailId");

                    b.HasIndex("WMCalibrationEccentricityTestId");

                    b.HasIndex("WMCalibrationLinearityTestId");

                    b.HasIndex("WMCalibrationRepeatabilityTestId");

                    b.ToTable("WMCalibrationDetailWeights");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationEccentricityTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CValue")
                        .HasColumnType("double");

                    b.Property<int?>("CValueStandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("CalculatedCapacityWeight")
                        .HasColumnType("double");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoneBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InitialZeroReading")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("LBValue")
                        .HasColumnType("double");

                    b.Property<int?>("LBValueStandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("LFValue")
                        .HasColumnType("double");

                    b.Property<int?>("LFValueStandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("MeanValue")
                        .HasColumnType("double");

                    b.Property<double>("PRSDValue")
                        .HasColumnType("double");

                    b.Property<double>("RBValue")
                        .HasColumnType("double");

                    b.Property<int?>("RBValueStandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("RFValue")
                        .HasColumnType("double");

                    b.Property<int?>("RFValueStandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<string>("SpriritLevelBubble")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("StandardDeviationValue")
                        .HasColumnType("double");

                    b.Property<int?>("TestResultId")
                        .HasColumnType("int");

                    b.Property<int?>("WMCalibrationHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CValueStandardWeightBoxId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LBValueStandardWeightBoxId");

                    b.HasIndex("LFValueStandardWeightBoxId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("RBValueStandardWeightBoxId");

                    b.HasIndex("RFValueStandardWeightBoxId");

                    b.HasIndex("TestResultId");

                    b.HasIndex("WMCalibrationHeaderId");

                    b.ToTable("WMCalibrationEccentricityTests");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationFrequencyId")
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CalibrationTestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ChecklistTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InitialZeroReading")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("InspectionChecklistId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsReCalibrated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ReCalibrationRemark")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("WeighingMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationFrequencyId");

                    b.HasIndex("CalibrationStatusId");

                    b.HasIndex("ChecklistTypeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("InspectionChecklistId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("WeighingMachineId");

                    b.ToTable("WMCalibrationHeaders");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationLinearityTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoneBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InitialZeroReading")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("MeanValue")
                        .HasColumnType("double");

                    b.Property<double>("PRSDValue")
                        .HasColumnType("double");

                    b.Property<string>("SpriritLevelBubble")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("StandardDeviationValue")
                        .HasColumnType("double");

                    b.Property<int?>("TestResultId")
                        .HasColumnType("int");

                    b.Property<int?>("WMCalibrationHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue1")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue1StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue2")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue2StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue3")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue3StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue4")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue4StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue5")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue5StandardWeightBoxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TestResultId");

                    b.HasIndex("WMCalibrationHeaderId");

                    b.HasIndex("WeightValue1StandardWeightBoxId");

                    b.HasIndex("WeightValue2StandardWeightBoxId");

                    b.HasIndex("WeightValue3StandardWeightBoxId");

                    b.HasIndex("WeightValue4StandardWeightBoxId");

                    b.HasIndex("WeightValue5StandardWeightBoxId");

                    b.ToTable("WMCalibrationLinearityTests");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationRepeatabilityTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CalculatedCapacityWeight")
                        .HasColumnType("double");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoneBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InitialZeroReading")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("MeanValue")
                        .HasColumnType("double");

                    b.Property<double>("PRSDValue")
                        .HasColumnType("double");

                    b.Property<string>("SpriritLevelBubble")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("StandardDeviationValue")
                        .HasColumnType("double");

                    b.Property<int?>("TestResultId")
                        .HasColumnType("int");

                    b.Property<int?>("WMCalibrationHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue1")
                        .HasColumnType("double");

                    b.Property<double>("WeightValue10")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue10StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<int?>("WeightValue1StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue2")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue2StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue3")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue3StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue4")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue4StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue5")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue5StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue6")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue6StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue7")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue7StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue8")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue8StandardWeightBoxId")
                        .HasColumnType("int");

                    b.Property<double>("WeightValue9")
                        .HasColumnType("double");

                    b.Property<int?>("WeightValue9StandardWeightBoxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TestResultId");

                    b.HasIndex("WMCalibrationHeaderId");

                    b.HasIndex("WeightValue10StandardWeightBoxId");

                    b.HasIndex("WeightValue1StandardWeightBoxId");

                    b.HasIndex("WeightValue2StandardWeightBoxId");

                    b.HasIndex("WeightValue3StandardWeightBoxId");

                    b.HasIndex("WeightValue4StandardWeightBoxId");

                    b.HasIndex("WeightValue5StandardWeightBoxId");

                    b.HasIndex("WeightValue6StandardWeightBoxId");

                    b.HasIndex("WeightValue7StandardWeightBoxId");

                    b.HasIndex("WeightValue8StandardWeightBoxId");

                    b.HasIndex("WeightValue9StandardWeightBoxId");

                    b.ToTable("WMCalibrationRepeatabilityTests");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationUncertainityTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("TestResultId")
                        .HasColumnType("int");

                    b.Property<double>("UncertainityValue")
                        .HasColumnType("double");

                    b.Property<int?>("WMCalibrationHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TestResultId");

                    b.HasIndex("WMCalibrationHeaderId");

                    b.ToTable("WMCalibrationUncertainityTests");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMSPasswordManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("WMSPasswordManager");
                });

            modelBuilder.Entity("ELog.Core.Entities.WeighingMachineMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("BalancedTypeId")
                        .HasColumnType("int");

                    b.Property<float?>("Capacity")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("EccentricityAcceptanceMaxValue")
                        .HasColumnType("float");

                    b.Property<float?>("EccentricityAcceptanceMinValue")
                        .HasColumnType("float");

                    b.Property<float?>("EccentricityAcceptanceValue")
                        .HasColumnType("float");

                    b.Property<string>("EccentricityInstruction")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("FormatNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Formula")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LeastCount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("LeastCountDigitAfterDecimal")
                        .HasColumnType("int");

                    b.Property<float?>("LinearityAcceptanceMaxValueWg1")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceMaxValueWg2")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceMaxValueWg3")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceMaxValueWg4")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceMaxValueWg5")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceMinValueWg1")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceMinValueWg2")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceMinValueWg3")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceMinValueWg4")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceMinValueWg5")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceValue")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceValueWg1")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceValueWg2")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceValueWg3")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceValueWg4")
                        .HasColumnType("float");

                    b.Property<float?>("LinearityAcceptanceValueWg5")
                        .HasColumnType("float");

                    b.Property<string>("LinearityInstruction")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Make")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<float?>("MaximumOperatingCapacity")
                        .HasColumnType("float");

                    b.Property<float?>("MeanMaximumValue")
                        .HasColumnType("float");

                    b.Property<float?>("MeanMinimumValue")
                        .HasColumnType("float");

                    b.Property<float?>("MeanValue")
                        .HasColumnType("float");

                    b.Property<float?>("MinimumOperatingCapacity")
                        .HasColumnType("float");

                    b.Property<string>("Modal")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<float?>("PercentageRSDValue")
                        .HasColumnType("float");

                    b.Property<int?>("PortNumber")
                        .HasColumnType("int");

                    b.Property<string>("RefrenceSOPNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("RepeatabilityAcceptanceMaxValue")
                        .HasColumnType("float");

                    b.Property<float?>("RepeatabilityAcceptanceMinValue")
                        .HasColumnType("float");

                    b.Property<float?>("RepeatabilityAcceptanceValue")
                        .HasColumnType("float");

                    b.Property<string>("RepeatabilityInstruction")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("StampingDoneOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StampingDueOn")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("StandardDeviationValue")
                        .HasColumnType("float");

                    b.Property<int?>("SubPlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<float?>("UncertaintyAcceptanceValue")
                        .HasColumnType("float");

                    b.Property<string>("UncertaintyInstruction")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int?>("UnitOfMeasurementId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WeighingMachineCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubPlantId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("WeighingMachineMaster");
                });

            modelBuilder.Entity("ELog.Core.Entities.WeighingMachineTestConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsEccentricityTestRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsLinearityTestRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsRepeatabilityTestRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsUncertainityTestRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("WeighingMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("FrequencyTypeId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("WeighingMachineId");

                    b.ToTable("WeighingMachineTestConfigurations");
                });

            modelBuilder.Entity("ELog.Core.Entities.WeightCaptureDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContainerNo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("GrossWeight")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<float?>("NetWeight")
                        .HasColumnType("float");

                    b.Property<int?>("NoOfPacks")
                        .HasColumnType("int");

                    b.Property<int>("ScanBalanceId")
                        .HasColumnType("int");

                    b.Property<float?>("TareWeight")
                        .HasColumnType("float");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("WeighingMachineId")
                        .HasColumnType("int");

                    b.Property<int>("WeightCaptureHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("WeighingMachineId");

                    b.HasIndex("WeightCaptureHeaderId");

                    b.ToTable("WeightCaptureDetails");
                });

            modelBuilder.Entity("ELog.Core.Entities.WeightCaptureHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("MfgBatchNoId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitofMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("MfgBatchNoId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("WeightCaptureHeaders");
                });

            modelBuilder.Entity("ELog.Core.Entities.WeightVerificationHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BatchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("CubicalId")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("DispGrossWeight")
                        .HasColumnType("float");

                    b.Property<int?>("DispensedId")
                        .HasColumnType("int");

                    b.Property<float?>("GrossWeight")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGrossWeight")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("LotId")
                        .HasColumnType("int");

                    b.Property<float?>("NetWeight")
                        .HasColumnType("float");

                    b.Property<int?>("NoOfContainers")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfPacks")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RecivedNoOfPacks")
                        .HasColumnType("int");

                    b.Property<int>("ScanBalanceId")
                        .HasColumnType("int");

                    b.Property<string>("ScanBalanceNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("TareWeight")
                        .HasColumnType("float");

                    b.Property<int?>("UnitofMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("WeightVerificationHeader");
                });

            modelBuilder.Entity("ELog.Core.Entities.ZMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescriptionField")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ZField")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ZMaster");
                });

            modelBuilder.Entity("ELog.Core.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("varchar(1024) CHARACTER SET utf8mb4")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("ELog.Core.SQLDtoEntities.AuditReportDetailsDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ApprovalStatusDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CountryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GS1Prefix")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("License")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MasterPlantId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PlantId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PlantName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StateName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("SysEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TaxRegistrationNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TenancyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Website")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AuditSQLResult");
                });

            modelBuilder.Entity("Elog.Core.Entities.ClientForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ApproveDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FormEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormJson")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FormName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FormStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MenuId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Permissions")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Elog_ClientForms");
                });

            modelBuilder.Entity("Elog.Core.Entities.ElogControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ControlDefaults")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ControlID")
                        .HasColumnType("int");

                    b.Property<string>("ControlLabel")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ControlType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DBDataType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DBFieldName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ELogId")
                        .HasColumnType("int");

                    b.Property<bool>("FlagIsDefaultSql")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FlagIsMandatory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Elog_ElogControls");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Roles.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany()
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicEntityProperty", "DynamicEntityProperty")
                        .WithMany()
                        .HasForeignKey("DynamicEntityPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany("DynamicPropertyValues")
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.HasOne("Abp.Webhooks.WebhookEvent", "WebhookEvent")
                        .WithMany()
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Authorization.Roles.Role", b =>
                {
                    b.HasOne("ELog.Core.Entities.ApprovalStatusMaster", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Authorization.Users.User", b =>
                {
                    b.HasOne("ELog.Core.Entities.ApprovalStatusMaster", null)
                        .WithMany("Users")
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.DesignationMaster", null)
                        .WithMany("Users")
                        .HasForeignKey("DesignationId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.ModeMaster", null)
                        .WithMany("Users")
                        .HasForeignKey("ModeId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("Users")
                        .HasForeignKey("PlantId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("ReportingManagerId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ActivityMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ApprovalLevelMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ApprovalStatusMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ApprovalUserModuleMappingMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.AreaMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.DepartmentMaster", null)
                        .WithMany("AreaMasters")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("AreaMasters")
                        .HasForeignKey("SubPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.AreaUsageListLog", b =>
                {
                    b.HasOne("ELog.Core.Entities.AreaUsageLog", null)
                        .WithMany("AreaUsageLogLists")
                        .HasForeignKey("AreaUsageHeaderId");

                    b.HasOne("ELog.Core.Entities.CheckpointMaster", null)
                        .WithMany("AreaUsageListLog")
                        .HasForeignKey("CheckpointId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.AreaUsageLog", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CageLabelPrinting", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CalenderMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.HolidayTypeMaster", null)
                        .WithMany("CalenderMasters")
                        .HasForeignKey("HolidayTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CalibrationFrequencyMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.FrequencyTypeMaster", null)
                        .WithMany("CalibrationFrequencyMasters")
                        .HasForeignKey("FrequencyTypeId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.WeighingMachineMaster", null)
                        .WithMany("Calibrations")
                        .HasForeignKey("WeighingMachineId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CalibrationStatusMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CalibrationTestStatusMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ChecklistTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.SubModuleMaster", null)
                        .WithMany("ChecklistTypeMasters")
                        .HasForeignKey("SubModuleId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("ChecklistTypeMasters")
                        .HasForeignKey("SubPlantId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CheckpointMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.InspectionChecklistMaster", null)
                        .WithMany("CheckpointMasters")
                        .HasForeignKey("InspectionChecklistId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CheckpointTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CompRecipeTransDetlMapping", b =>
                {
                    b.HasOne("ELog.Core.Entities.MaterialMaster", "MaterialMaster")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.RecipeTransactionDetails", "RecipeTransactionDetails")
                        .WithMany("CompRecipeTransDetlMapping")
                        .HasForeignKey("RecipeTransactiondetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.Consumption", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ConsumptionDetails", b =>
                {
                    b.HasOne("ELog.Core.Entities.Consumption", null)
                        .WithMany("ConsumptionDetails")
                        .HasForeignKey("ConsumptionId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CountryMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicalRecipeTranDetlMapping", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Entities.CubicleMaster", "CubicleMaster")
                        .WithMany()
                        .HasForeignKey("CubicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.RecipeTransactionDetails", "RecipeTransactionDetails")
                        .WithMany("CubicalRecipeTranDetlMapping")
                        .HasForeignKey("RecipeTransactiondetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleAssignmentDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Entities.CubicleAssignmentHeader", null)
                        .WithMany("CubicleAssignmentDetails")
                        .HasForeignKey("CubicleAssignmentHeaderId");

                    b.HasOne("ELog.Core.Entities.CubicleMaster", null)
                        .WithMany("CubicleAssignmentDetails")
                        .HasForeignKey("CubicleId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.InspectionLot", null)
                        .WithMany("CubicleAssignmentDetails")
                        .HasForeignKey("InspectionLotId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.ProcessOrder", null)
                        .WithMany("CubicleAssignmentDetails")
                        .HasForeignKey("ProcessOrderId");

                    b.HasOne("ELog.Core.Entities.ProcessOrderMaterial", null)
                        .WithMany("CubicleAssignmentDetails")
                        .HasForeignKey("ProcessOrderMaterialId");

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("CubicleAssignmentDetails")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleAssignmentHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("CubicleAssignmentHeaders")
                        .HasForeignKey("GroupStatusId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleAssignmentWIP", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleCleaningCheckpoint", b =>
                {
                    b.HasOne("ELog.Core.Entities.CheckpointMaster", null)
                        .WithMany("CubicleCleaningCheckpoints")
                        .HasForeignKey("CheckPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Entities.CubicleCleaningTransaction", null)
                        .WithMany("CubicleCleaningCheckpoints")
                        .HasForeignKey("CubicleCleaningTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleCleaningDailyStatus", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Entities.CubicleMaster", null)
                        .WithMany("CubicleCleaningDailyStatuses")
                        .HasForeignKey("CubicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("CubicleCleaningDailyStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleCleaningTransaction", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Entities.CubicleMaster", null)
                        .WithMany("CubicleCleaningTransactions")
                        .HasForeignKey("CubicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("CubicleCleaningTransactions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.CubicleCleaningTypeMaster", null)
                        .WithMany("CubicleCleaningTransactions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleCleaningTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.CubicleMaster", b =>
                {
                    b.HasOne("ELog.Core.Entities.AreaMaster", null)
                        .WithMany("CubicleMasters")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("CubicleMasters")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.DepartmentMaster", null)
                        .WithMany("CubicleMasters")
                        .HasForeignKey("SLOCId");
                });

            modelBuilder.Entity("ELog.Core.Entities.DepartmentMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("DepartmentMasters")
                        .HasForeignKey("SubPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.DesignationMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.DeviceMaster", b =>
                {
                    b.HasOne("ELog.Core.Entities.AreaMaster", null)
                        .WithMany("DeviceMasters")
                        .HasForeignKey("AreaId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Entities.CubicleMaster", null)
                        .WithMany("DeviceMasters")
                        .HasForeignKey("CubicleId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.DepartmentMaster", null)
                        .WithMany("DeviceMasters")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ELog.Core.Entities.DeviceTypeMaster", null)
                        .WithMany("DeviceMasters")
                        .HasForeignKey("DeviceTypeId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.ModeMaster", null)
                        .WithMany("DeviceMasters")
                        .HasForeignKey("ModeId");
                });

            modelBuilder.Entity("ELog.Core.Entities.DeviceTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.DispatchDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.DispensingDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.DispensingHeader", null)
                        .WithMany("DispensingDetails")
                        .HasForeignKey("DispensingHeaderId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.SamplingTypeMaster", null)
                        .WithMany("DispensingDetails")
                        .HasForeignKey("SamplingTypeId");

                    b.HasOne("ELog.Core.Entities.UnitOfMeasurementMaster", null)
                        .WithMany("DispensingDetails")
                        .HasForeignKey("UnitOfMeasurementId");

                    b.HasOne("ELog.Core.Entities.WeighingMachineMaster", null)
                        .WithMany("DispensingDetails")
                        .HasForeignKey("WeighingMachineId");
                });

            modelBuilder.Entity("ELog.Core.Entities.DispensingHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.InspectionLot", null)
                        .WithMany("DispensingHeaders")
                        .HasForeignKey("InspectionLotId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.ProcessOrder", null)
                        .WithMany("DispensingHeaders")
                        .HasForeignKey("ProcessOrderId");

                    b.HasOne("ELog.Core.Entities.EquipmentMaster", null)
                        .WithMany("DispensingHeaders")
                        .HasForeignKey("RLAFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("DispensingHeaders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.DispensingPrintDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.DeviceMaster", null)
                        .WithMany("DispensingPrintDetails")
                        .HasForeignKey("DeviceId");

                    b.HasOne("ELog.Core.Entities.DispensingDetail", null)
                        .WithMany("DispensingPrintDetails")
                        .HasForeignKey("DispensingDetailId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentAssignment", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Entities.CubicleAssignmentHeader", null)
                        .WithMany("EquipmentAssignments")
                        .HasForeignKey("CubicleAssignmentHeaderId");

                    b.HasOne("ELog.Core.Entities.CubicleMaster", null)
                        .WithMany("EquipmentAssignments")
                        .HasForeignKey("Cubicleid");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.EquipmentMaster", null)
                        .WithMany("EquipmentAssignments")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentCleaningCheckpoint", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.EquipmentCleaningTransaction", null)
                        .WithMany("EquipmentCleaningCheckpoints")
                        .HasForeignKey("EquipmentCleaningTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentCleaningStatus", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("EquipmentCleaningStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentCleaningTransaction", b =>
                {
                    b.HasOne("ELog.Core.Entities.EquipmentCleaningTypeMaster", null)
                        .WithMany("EquipmentCleaningTransactions")
                        .HasForeignKey("CleaningTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("EquipmentCleaningTransactions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentCleaningTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.EquipmentTypeMaster", null)
                        .WithMany("EquipmentMasters")
                        .HasForeignKey("EquipmentTypeId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("EquipmentMasters")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.DepartmentMaster", null)
                        .WithMany("EquipmentMasters")
                        .HasForeignKey("SLOCId");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentUsageLog", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.EquipmentUsageLogList", b =>
                {
                    b.HasOne("ELog.Core.Entities.CheckpointMaster", null)
                        .WithMany("EquipmentUsageLogList")
                        .HasForeignKey("CheckpointId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.EquipmentUsageLog", null)
                        .WithMany("EquipmentUsageLogLists")
                        .HasForeignKey("EquipmentUsageHeaderId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.FgPicking", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.FgPutAway", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.FrequencyTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.GRNHeader", null)
                        .WithMany("GRNDetails")
                        .HasForeignKey("GRNHeaderId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.Material", null)
                        .WithMany("GRNDetails")
                        .HasForeignKey("MaterialId");

                    b.HasOne("ELog.Core.Entities.MaterialConsignmentDetail", null)
                        .WithMany("GRNDetails")
                        .HasForeignKey("MfgBatchNoId");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNMaterialLabelPrintingContainerBarcode", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.GRNDetail", null)
                        .WithMany("GRNMaterialLabelPrintingContainerBarcodes")
                        .HasForeignKey("GRNDetailId");

                    b.HasOne("ELog.Core.Entities.GRNMaterialLabelPrintingHeader", null)
                        .WithMany("GRNMaterialLabelPrintingContainerBarcodes")
                        .HasForeignKey("GRNMaterialLabelPrintingHeaderId");

                    b.HasOne("ELog.Core.Entities.GRNQtyDetail", null)
                        .WithMany("GRNMaterialLabelPrintingContainerBarcodes")
                        .HasForeignKey("GRNQtyDetailId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNMaterialLabelPrintingDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.GRNMaterialLabelPrintingHeader", null)
                        .WithMany("GRNMaterialLabelPrintingDetails")
                        .HasForeignKey("GRNMaterialLabelPrintingHeaderId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.DeviceMaster", null)
                        .WithMany("GRNMaterialLabelPrintingDetails")
                        .HasForeignKey("PrinterId");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNMaterialLabelPrintingHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.GRNDetail", null)
                        .WithMany("GRNMaterialLabelPrintingHeaders")
                        .HasForeignKey("GRNDetailId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.GRNQtyDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.GRNDetail", null)
                        .WithMany("GRNQtyDetails")
                        .HasForeignKey("GRNDetailId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.GateEntry", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.InvoiceDetail", null)
                        .WithMany("GateEntries")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.GateMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("GateMasters")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.HandlingUnitMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.HandlingUnitTypeMaster", null)
                        .WithMany("HandlingUnitMasters")
                        .HasForeignKey("HandlingUnitTypeId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("HandlingUnitMasters")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.HandlingUnitTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.HolidayTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.InProcessLabelDetails", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.InspectionChecklistMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.InspectionLot", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.IssueToProduction", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.LabelPrintPacking", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.LineClearanceCheckpoint", b =>
                {
                    b.HasOne("ELog.Core.Entities.CheckpointMaster", null)
                        .WithMany("LineClearanceCheckpoints")
                        .HasForeignKey("CheckPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.LineClearanceTransaction", null)
                        .WithMany("LineClearanceCheckpoints")
                        .HasForeignKey("LineClearanceTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.LineClearanceTransaction", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Entities.CubicleMaster", null)
                        .WithMany("LineClearanceTransactions")
                        .HasForeignKey("CubicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.CubicleAssignmentHeader", null)
                        .WithMany("LineClearanceTransactions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("LineClearanceTransactions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.Loading", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.LocationMaster", b =>
                {
                    b.HasOne("ELog.Core.Entities.AreaMaster", null)
                        .WithMany("LocationMasters")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("LocationMasters")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.LogFormHistory", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.LogoMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.Material", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PurchaseOrder", null)
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialBatchDispensingContainerDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.MaterialBatchDispensingHeader", null)
                        .WithMany("MaterialBatchDispensingContainerDetails")
                        .HasForeignKey("MaterialBatchDispensingHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialBatchDispensingHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialChecklistDetail", b =>
                {
                    b.HasOne("ELog.Core.Entities.CheckpointMaster", null)
                        .WithMany("MaterialChecklistDetails")
                        .HasForeignKey("CheckPointId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.MaterialInspectionRelationDetail", null)
                        .WithMany("MaterialCheckpoints")
                        .HasForeignKey("MaterialRelationId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialConsignmentDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.MaterialInspectionRelationDetail", null)
                        .WithMany("MaterialConsignments")
                        .HasForeignKey("MaterialRelationId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialDamageDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.MaterialConsignmentDetail", null)
                        .WithMany("MaterialDamageDetails")
                        .HasForeignKey("MaterialConsignmentId");

                    b.HasOne("ELog.Core.Entities.MaterialInspectionRelationDetail", null)
                        .WithMany("MaterialDamageDetails")
                        .HasForeignKey("MaterialRelationId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialDestruction", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialInspectionHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.GateEntry", null)
                        .WithMany("MaterialInspectionHeaders")
                        .HasForeignKey("GateEntryId");

                    b.HasOne("ELog.Core.Entities.InvoiceDetail", null)
                        .WithMany("MaterialInspectionHeaders")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.TransactionStatusMaster", null)
                        .WithMany("MaterialInspectionHeaders")
                        .HasForeignKey("TransactionStatusId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialInspectionRelationDetail", b =>
                {
                    b.HasOne("ELog.Core.Entities.ChecklistTypeMaster", null)
                        .WithMany("MaterialInspectionRelationDetails")
                        .HasForeignKey("ChecklistTypeId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.InspectionChecklistMaster", null)
                        .WithMany("MaterialInspectionRelationDetails")
                        .HasForeignKey("InspectionChecklistId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.MaterialInspectionHeader", null)
                        .WithMany("MaterialInspectionRelationDetails")
                        .HasForeignKey("MaterialHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.Material", null)
                        .WithMany("MaterialInspectionRelationDetails")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.TransactionStatusMaster", null)
                        .WithMany("MaterialInspectionRelationDetails")
                        .HasForeignKey("TransactionStatusId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialReturn", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialRteturnDetailsSAP", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.MaterialTransferTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ModeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ModuleMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ModuleSubModule", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.ModuleMaster", null)
                        .WithMany("ModuleSubModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.SubModuleMaster", null)
                        .WithMany("ModuleSubModules")
                        .HasForeignKey("SubModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.OBDDetails", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.PRNEntryMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.PackingMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.PalletMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.Palletization", b =>
                {
                    b.HasOne("ELog.Core.Entities.GRNMaterialLabelPrintingContainerBarcode", null)
                        .WithMany("Palletizations")
                        .HasForeignKey("ContainerId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.GRNDetail", null)
                        .WithMany("Palletizations")
                        .HasForeignKey("GRNDetailId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.Material", null)
                        .WithMany("Palletizations")
                        .HasForeignKey("MaterialId");

                    b.HasOne("ELog.Core.Entities.HandlingUnitMaster", null)
                        .WithMany("Palletizations")
                        .HasForeignKey("PalletId");
                });

            modelBuilder.Entity("ELog.Core.Entities.PermissionMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.PickingMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.PlantMaster", b =>
                {
                    b.HasOne("ELog.Core.Entities.CountryMaster", null)
                        .WithMany("Plants")
                        .HasForeignKey("CountryId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("MasterPlants")
                        .HasForeignKey("MasterPlantId");

                    b.HasOne("ELog.Core.Entities.StateMaster", null)
                        .WithMany("Plants")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("ELog.Core.Entities.PostWIPDataToSAP", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ProcessOrder", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ProcessOrderAfterRelease", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ProcessOrderMaterial", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.InspectionLot", null)
                        .WithMany("ProcessOrderMaterials")
                        .HasForeignKey("InspectionLotId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.ProcessOrder", null)
                        .WithMany("ProcessOrders")
                        .HasForeignKey("ProcessOrderId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ProcessOrderMaterialAfterRelease", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.PutAwayBinToBinTransfer", b =>
                {
                    b.HasOne("ELog.Core.Entities.GRNMaterialLabelPrintingContainerBarcode", null)
                        .WithMany("PutAwayBinToBinTransfers")
                        .HasForeignKey("ContainerId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.LocationMaster", null)
                        .WithMany("PutAwayBinToBinTransfers")
                        .HasForeignKey("LocationId");

                    b.HasOne("ELog.Core.Entities.Material", null)
                        .WithMany("PutAwayBinToBinTransfers")
                        .HasForeignKey("MaterialId");

                    b.HasOne("ELog.Core.Entities.MaterialTransferTypeMaster", null)
                        .WithMany("PutAwayBinToBinTransfers")
                        .HasForeignKey("MaterialTransferTypeId");

                    b.HasOne("ELog.Core.Entities.HandlingUnitMaster", null)
                        .WithMany("PutAwayBinToBinTransfers")
                        .HasForeignKey("PalletId");
                });

            modelBuilder.Entity("ELog.Core.Entities.Putaway", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.RecipeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.RecipeTransactionDetails", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.RecipeTransactionHeader", "RecipeTransactionHeader")
                        .WithMany("RecipeTransactionDetails")
                        .HasForeignKey("RecipeTransactionHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.RecipeTransactionHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.RecipeWiseProcessOrderMapping", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ReportConfiguration", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.SubModuleMaster", null)
                        .WithMany("ReportConfigurations")
                        .HasForeignKey("SubModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.ReturnToVendorDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.ReturnToVendorHeader", null)
                        .WithMany("ReturnToVendorDetails")
                        .HasForeignKey("ReturnToVendorHeaderId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ReturnToVendorHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("ReturnToVendorHeaders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.RolePermissions", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.ModuleSubModule", null)
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleSubModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.PermissionMaster", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Roles.Role", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPGRNPosting", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPPlantMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPProcessOrder", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPProcessOrderReceivedMaterial", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPQualityControlDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPReturntoMaterial", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.SAPUOMMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.SampleDestruction", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.UnitOfMeasurementMaster", null)
                        .WithMany("SampleDestructions")
                        .HasForeignKey("UnitOfMeasurementId");

                    b.HasOne("ELog.Core.Entities.WeighingMachineMaster", null)
                        .WithMany("SampleDestructions")
                        .HasForeignKey("WeighingMachineId");
                });

            modelBuilder.Entity("ELog.Core.Entities.SamplingTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.StageOutDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StageOutHeader", null)
                        .WithMany("StageOutDetails")
                        .HasForeignKey("StageOutHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.StageOutHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Entities.CubicleMaster", null)
                        .WithMany("StageOutHeaders")
                        .HasForeignKey("CubicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StatusMaster", null)
                        .WithMany("StageOutHeader")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.StandardWeightBoxMaster", b =>
                {
                    b.HasOne("ELog.Core.Entities.AreaMaster", null)
                        .WithMany("StandardWeightBoxMasters")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.DepartmentMaster", null)
                        .WithMany("StandardWeightBoxMasters")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("StandardWeightBoxMasters")
                        .HasForeignKey("SubPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.StandardWeightMaster", b =>
                {
                    b.HasOne("ELog.Core.Entities.AreaMaster", null)
                        .WithMany("StandardWeightMasters")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.DepartmentMaster", null)
                        .WithMany("StandardWeightMasters")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("StandardWeightMasters")
                        .HasForeignKey("StandardWeightBoxMasterId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("StandardWeightMasters")
                        .HasForeignKey("SubPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.UnitOfMeasurementMaster", null)
                        .WithMany("StandardWeightMasters")
                        .HasForeignKey("UnitOfMeasurementId");
                });

            modelBuilder.Entity("ELog.Core.Entities.StateMaster", b =>
                {
                    b.HasOne("ELog.Core.Entities.CountryMaster", null)
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.StatusMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.ModuleMaster", null)
                        .WithMany("StatusMasters")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.SubModuleMaster", null)
                        .WithMany("StatusMasters")
                        .HasForeignKey("SubModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.SubModuleMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.SubModuleTypeMaster", null)
                        .WithMany("SubModules")
                        .HasForeignKey("SubModuleTypeId");
                });

            modelBuilder.Entity("ELog.Core.Entities.SubModuleTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.TransactionStatusMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.UnitOfMeasurementMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.UnitOfMeasurementTypeMaster", null)
                        .WithMany("UnitOfMeasurementMasters")
                        .HasForeignKey("UnitOfMeasurementTypeId");
                });

            modelBuilder.Entity("ELog.Core.Entities.UnitOfMeasurementTypeMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.UserPlants", b =>
                {
                    b.HasOne("ELog.Core.Entities.PlantMaster", "PlantMaster")
                        .WithMany("UserPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "User")
                        .WithMany("UserPlants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.VehicleInspectionDetail", b =>
                {
                    b.HasOne("ELog.Core.Entities.CheckpointMaster", null)
                        .WithMany("VehicleInspectionDetails")
                        .HasForeignKey("CheckpointId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.VehicleInspectionHeader", null)
                        .WithMany("VehicleInspectionDetails")
                        .HasForeignKey("VehicleInspectionHeaderId");
                });

            modelBuilder.Entity("ELog.Core.Entities.VehicleInspectionHeader", b =>
                {
                    b.HasOne("ELog.Core.Entities.ChecklistTypeMaster", null)
                        .WithMany("VehicleInspectionHeader")
                        .HasForeignKey("ChecklistTypeId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.GateEntry", null)
                        .WithMany("VehicleInspectionHeaders")
                        .HasForeignKey("GateEntryId");

                    b.HasOne("ELog.Core.Entities.InspectionChecklistMaster", null)
                        .WithMany("VehicleInspectionHeader")
                        .HasForeignKey("InspectionChecklistId");

                    b.HasOne("ELog.Core.Entities.InvoiceDetail", null)
                        .WithMany("VehicleInspectionHeaders")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.TransactionStatusMaster", null)
                        .WithMany("VehicleInspectionHeaders")
                        .HasForeignKey("TransactionStatusId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WIPLineClearanceCheckpoints", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.WIPLineClearanceTransaction", null)
                        .WithMany("LineClearanceCheckpoints")
                        .HasForeignKey("LineClearanceTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.WIPLineClearanceTransaction", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WIPMaterialVerification", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibratedLatestMachineDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationHeader", null)
                        .WithMany("WMCalibratedLatestMachineDetails")
                        .HasForeignKey("WMCalibrationHeaderId");

                    b.HasOne("ELog.Core.Entities.WeighingMachineMaster", null)
                        .WithMany("WMCalibratedLatestMachineDetails")
                        .HasForeignKey("WeighingMachineId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationCheckpoint", b =>
                {
                    b.HasOne("ELog.Core.Entities.CheckpointMaster", null)
                        .WithMany("WMCalibrationCheckpoints")
                        .HasForeignKey("CheckPointId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationHeader", null)
                        .WithMany("WMCalibrationCheckpoints")
                        .HasForeignKey("WMCalibrationHeaderId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationDetail", b =>
                {
                    b.HasOne("ELog.Core.Entities.CalibrationFrequencyMaster", null)
                        .WithMany("WMCalibrationDetails")
                        .HasForeignKey("CalibrationLevelId");

                    b.HasOne("ELog.Core.Entities.CalibrationStatusMaster", null)
                        .WithMany("WMCalibrationDetails")
                        .HasForeignKey("CalibrationStatusId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMCalibrationDetails")
                        .HasForeignKey("StandardWeightBoxId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationHeader", null)
                        .WithMany("WMCalibrationDetails")
                        .HasForeignKey("WMCalibrationHeaderId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationDetailWeight", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StandardWeightMaster", null)
                        .WithMany("WMCalibrationDetailWeights")
                        .HasForeignKey("StandardWeightId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationDetail", null)
                        .WithMany("WMCalibrationDetailWeights")
                        .HasForeignKey("WMCalibrationDetailId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationEccentricityTest", null)
                        .WithMany("WMCalibrationDetailWeights")
                        .HasForeignKey("WMCalibrationEccentricityTestId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationLinearityTest", null)
                        .WithMany("WMCalibrationDetailWeights")
                        .HasForeignKey("WMCalibrationLinearityTestId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationRepeatabilityTest", null)
                        .WithMany("WMCalibrationDetailWeights")
                        .HasForeignKey("WMCalibrationRepeatabilityTestId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationEccentricityTest", b =>
                {
                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMCValueCalibrationEccentricityTests")
                        .HasForeignKey("CValueStandardWeightBoxId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMLBValueCalibrationEccentricityTests")
                        .HasForeignKey("LBValueStandardWeightBoxId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMLFValueCalibrationEccentricityTests")
                        .HasForeignKey("LFValueStandardWeightBoxId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMRBValueCalibrationEccentricityTests")
                        .HasForeignKey("RBValueStandardWeightBoxId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMRFValueCalibrationEccentricityTests")
                        .HasForeignKey("RFValueStandardWeightBoxId");

                    b.HasOne("ELog.Core.Entities.CalibrationTestStatusMaster", null)
                        .WithMany("WMCalibrationEccentricityTests")
                        .HasForeignKey("TestResultId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationHeader", null)
                        .WithMany("WMCalibrationEccentricityTests")
                        .HasForeignKey("WMCalibrationHeaderId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationHeader", b =>
                {
                    b.HasOne("ELog.Core.Entities.FrequencyTypeMaster", null)
                        .WithMany("WMCalibrationHeaders")
                        .HasForeignKey("CalibrationFrequencyId");

                    b.HasOne("ELog.Core.Entities.CalibrationStatusMaster", null)
                        .WithMany("WMCalibrationHeaders")
                        .HasForeignKey("CalibrationStatusId");

                    b.HasOne("ELog.Core.Entities.ChecklistTypeMaster", null)
                        .WithMany("WMCalibrationHeaders")
                        .HasForeignKey("ChecklistTypeId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.InspectionChecklistMaster", null)
                        .WithMany("WMCalibrationHeaders")
                        .HasForeignKey("InspectionChecklistId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.WeighingMachineMaster", null)
                        .WithMany("WMCalibrationHeaders")
                        .HasForeignKey("WeighingMachineId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationLinearityTest", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.CalibrationTestStatusMaster", null)
                        .WithMany("WMCalibrationLinearityTests")
                        .HasForeignKey("TestResultId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationHeader", null)
                        .WithMany("WMCalibrationLinearityTests")
                        .HasForeignKey("WMCalibrationHeaderId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue1CalibrationLinearityTests")
                        .HasForeignKey("WeightValue1StandardWeightBoxId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue2CalibrationLinearityTests")
                        .HasForeignKey("WeightValue2StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationLinearityTests_StandardWeightBoxMaster_WeightV~1");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue3CalibrationLinearityTests")
                        .HasForeignKey("WeightValue3StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationLinearityTests_StandardWeightBoxMaster_WeightV~2");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue4CalibrationLinearityTests")
                        .HasForeignKey("WeightValue4StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationLinearityTests_StandardWeightBoxMaster_WeightV~3");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue5CalibrationLinearityTests")
                        .HasForeignKey("WeightValue5StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationLinearityTests_StandardWeightBoxMaster_WeightV~4");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationRepeatabilityTest", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.CalibrationTestStatusMaster", null)
                        .WithMany("WMCalibrationRepeatabilityTests")
                        .HasForeignKey("TestResultId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationHeader", null)
                        .WithMany("WMCalibrationRepeatabilityTests")
                        .HasForeignKey("WMCalibrationHeaderId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue10CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue10StandardWeightBoxId");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue1CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue1StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationRepeatabilityTests_StandardWeightBoxMaster_Wei~1");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue2CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue2StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationRepeatabilityTests_StandardWeightBoxMaster_Wei~2");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue3CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue3StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationRepeatabilityTests_StandardWeightBoxMaster_Wei~3");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue4CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue4StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationRepeatabilityTests_StandardWeightBoxMaster_Wei~4");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue5CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue5StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationRepeatabilityTests_StandardWeightBoxMaster_Wei~5");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue6CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue6StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationRepeatabilityTests_StandardWeightBoxMaster_Wei~6");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue7CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue7StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationRepeatabilityTests_StandardWeightBoxMaster_Wei~7");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue8CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue8StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationRepeatabilityTests_StandardWeightBoxMaster_Wei~8");

                    b.HasOne("ELog.Core.Entities.StandardWeightBoxMaster", null)
                        .WithMany("WMWeightValue9CalibrationRepeatabilityTests")
                        .HasForeignKey("WeightValue9StandardWeightBoxId")
                        .HasConstraintName("FK_WMCalibrationRepeatabilityTests_StandardWeightBoxMaster_Wei~9");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMCalibrationUncertainityTest", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.CalibrationTestStatusMaster", null)
                        .WithMany("WMCalibrationUncertainityTests")
                        .HasForeignKey("TestResultId");

                    b.HasOne("ELog.Core.Entities.WMCalibrationHeader", null)
                        .WithMany("WMCalibrationUncertainityTests")
                        .HasForeignKey("WMCalibrationHeaderId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WMSPasswordManager", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WeighingMachineMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.PlantMaster", null)
                        .WithMany("WeighingMachineMasters")
                        .HasForeignKey("SubPlantId");

                    b.HasOne("ELog.Core.Entities.UnitOfMeasurementMaster", null)
                        .WithMany("WeighingMachineMasters")
                        .HasForeignKey("UnitOfMeasurementId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WeighingMachineTestConfiguration", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.FrequencyTypeMaster", null)
                        .WithMany("WeighingMachineTestConfigurations")
                        .HasForeignKey("FrequencyTypeId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.WeighingMachineMaster", null)
                        .WithMany("WeighingMachineTestConfigurations")
                        .HasForeignKey("WeighingMachineId");
                });

            modelBuilder.Entity("ELog.Core.Entities.WeightCaptureDetail", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.WeighingMachineMaster", null)
                        .WithMany("WeightCaptureDetails")
                        .HasForeignKey("WeighingMachineId");

                    b.HasOne("ELog.Core.Entities.WeightCaptureHeader", null)
                        .WithMany("WeightCaptureHeaderDetails")
                        .HasForeignKey("WeightCaptureHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.WeightCaptureHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Entities.InvoiceDetail", null)
                        .WithMany("WeightCaptureHeaders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ELog.Core.Entities.MaterialConsignmentDetail", null)
                        .WithMany("WeightCapture")
                        .HasForeignKey("MfgBatchNoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELog.Core.Entities.PurchaseOrder", null)
                        .WithMany("WeightCaptureHeaders")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELog.Core.Entities.WeightVerificationHeader", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.Entities.ZMaster", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ELog.Core.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("ELog.Core.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Roles.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("ELog.Core.Authorization.Users.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
