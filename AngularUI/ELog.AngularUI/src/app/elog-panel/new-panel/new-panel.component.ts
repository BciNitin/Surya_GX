import { Component, Injector, Renderer2, ElementRef, ViewChild } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { ElogApiServiceServiceProxy, SetfetchDto, SetfetchNewDto, ClientFormsDto, ClientFormsServiceServiceProxy, SettingServiceProxy } from '@shared/service-proxies/service-proxies';
import { event, nodeName } from 'jquery';
import * as moment from 'moment';
import { HttpClient, HttpHeaders } from '@angular/common/http';

import { ActivatedRoute, Data, Router } from '@angular/router';
import { debounceTime, distinctUntilChanged, filter, finalize, map } from 'rxjs/operators';
import { forEach, includes, indexOf } from 'lodash';
import { formatDate, getLocaleDateFormat } from '@angular/common';
import { FormControl } from '@angular/forms';

declare var jquery: any;
declare var $: any;
@Component({
    selector: 'app-new-panel',
    templateUrl: './new-panel.component.html',
    styleUrls: ['./new-panel.component.css']
})
export class NewPanelComponent {
    toppings = new FormControl('');
    toppingList: string[] = ['.doc', '.docx', '.pdf', '.txt', '.rtf'];
    @ViewChild('div', { static: false }) div: ElementRef;
    @ViewChild('Calfields', { static: false }) Calfields: ElementRef;
    @ViewChild('caloperators', { static: false }) caloperators: ElementRef;
    @ViewChild('calvalue', { static: false }) calvalue: ElementRef;
    @ViewChild('calvalue2', { static: false }) calvalue2: ElementRef;
    value: any;
    data: any;
    modules: any;
    modules1: any;
    modules2: any;
    veps: any;
    frequency: boolean | null;
    res1: object[];
    bindingColumns = 'Id';
    displayColumns = '';
    filterColumns = 'Id';
    grid: string | null;
    getInputName: any;
    getTableInputName: any;
    inputArrays = [];
    artisanArray = [];
    getInputArtisan: any;
    getInputArtisanArray = [];
    approvalButton: boolean;
    testObject = {};
    form_data = {};
    formData = {};
    newObject = {};
    mapforComponent = {};
    fieldLength: boolean;
    Required: boolean;
    Readonly: boolean;
    Hidden: boolean;
    Minlength: any;
    Maxlength: any;
    selectedValue: any;
    selectedValue1: any;
    selectedValue2: any;
    selectedValue3: any;
    selectedValue4: any;
    selectedValue5: any;
    selectedValue6: any;
    selectedValue7: any;
    selectedValue8: any;
    selectDefault: any;
    setWidths: any;
    Autofill: any;
    eLogId: number;
    showHideInput: boolean;
    inputPlaceHolder: any;
    fieldType: any;
    selectedValue17: any;
    showHideSelect: boolean;
    showHideDate: boolean;
    showHideDateMonth: boolean;
    showHideHeading: boolean;
    showHideNumber: boolean;
    minDate: any;
    maxDate: any;
    defaultDate: any;
    fileSize: any;
    defaultDateMax: any;
    defaultDateMin: any;
    currentDate: any;
    showHideButton: boolean;
    showHideRadio: boolean;
    showHideEmail: boolean;
    showHideCheckbox: boolean;
    showHideCheckList: boolean;
    staticSection: any;
    counter: number;
    counter1: any;
    counter2: any;
    tableDataCount: any;
    formName: any;
    labelText: any;
    labelText1: any;
    labelColor: any;
    getOptionsFromSelect: any;
    getOptionsFromRadio: any;
    labelArray = [];
    testObject1: any;
    mmcdBlock = true;
    numberBlock = false;
    sfBlock = false;
    Ids: any;
    hededitBlock = false;
    dtBlock = false;
    tooltipsBlock = false;
    autogenerated: boolean;
    unique: boolean;
    arrayForSelectOptions = [];
    arrayForSelectOptionss = [];
    matchingElement: any;
    matchingElementNew: any;
    arrayForSelectRadio = [];
    arrayForSelectChecklist = [];
    arrayForSelectCheckbox = [];
    arrForm = [];
    arrNewform = [];
    inputArray = [];
    showHideTable: any;
    listbox: any;
    radiolistbox: any;
    checklistbox: any;
    checkbox: any;
    selectCounter: any;
    isformstatus: boolean = false;
    formstartdate: any;
    formenddate: any;
    formID: any;
    Cal_FieldArray = [];
    tableArray = [];
    Cal_field = [];
    arrayFromObject = [];
    Cal_operator: any;
    Cal_value: number;
    Cal_value2: number;
    Cal_Formula = '';
    htmlcode: SafeHtml;
    EditArrayForm: any;
    validationType: any;
    validationTypeOperator: any;
    validationTypeText: any;
    showHidefile: boolean;
    showHideRange: boolean;
    autosavetime: Date;
    type_validation_parent: any;
    formNewData = [];
    formNameError: boolean;
    tableName: any;
    isfpropMenu = true;
    isMenuOpen = true;
    isnavpanel = true;
    fieldhtml: any = [{
        "single_input_text": "<div class='form-group itemText width100' id><label for='InputText' class><p class='lbtx'>Text Field</p><span class='lbrq'></span><span class='lbtt'></span></label><input type='text' autocomplete='off' name='name' class='form-control' id='InputText' placeholder='Write here...(click me to make me active)'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "search_input": "<div class='form-group itemText ' id><label for='searchInput' class><p class='lbtx'>Search Field</p><span class='lbrq'></span><span class='lbtt'></span></label><input type='search' autocomplete='off' name='name' class='form-control' id='searchInput' placeholder='Write here...(click me to make me active)'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "text_area_field": "<div class='form-group' id='textArea '><label for='textArea' class=''><p class='lbtx'>TextArea Field</p><span class='lbrq'></span><span class='lbtt'></span></label><textarea class='form-control' id='textArea' name='textarea' placeholder='Write here...'></textarea><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "input_number": "<div class='form-group' id='number_field '><label for='numberField' class=''><p class='lbtx'>Number Field</p><span class='lbrq'></span><span class='lbtt'></span></label><input type='number' autocomplete='off' name='numberField' class='form-control' id='numberField' placeholder='Write here...(click me to make me active)'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "input_email": "<div class='form-group' id='input_email '><label for='InputEmail' class=''><p class='lbtx'>Email address</p><span class='lbrq'></span><span class='lbtt'></span></label><input type='email'  name='email' class='form-control' autocomplete='off' id='InputEmail' placeholder='Write here...(click me to make me active)'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "input_phone": "<div class='form-group' id='itemphone'><label for='Inputtel' class=''><p class='lbtx'>Phone</p><span class='lbrq'></span><span class='lbtt'></span></label><input type='tel' class='form-control' id='Inputtel' placeholder='Write here...'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "input_password": "<div class='form-group' id='item_password'><label for='Inputpassword' class='' name='password'><p class='lbtx'>Password</p><span class='lbrq'></span><span class='lbtt'></span></label><input type='password' class='form-control' id='Inputpassword' placeholder='Write here...' name='password'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "select_field": "<div class='form-group' id='select_field'><label for='selectField' class=''><p class='lbtx'>Select Field</p><span class='lbrq'></span><span class='lbtt'></span></label><select id='selectField' class='form-control' name='select' placeholder='Choose option'></select><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "input_monthyear": "<div class='form-group' id='input_monthyear'><label for='Monthyear' class=''><p class='lbtx'>Date_Time</p><span class='lbrq'></span><span class='lbtt'></span></label><input type='month' class='form-control' id='Monthyear' placeholder='Write here...' name='date'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "input_date": "<div class='form-group' id='input_date2'><label for='dateMonthyear' class=''><p class='lbtx'>Date_Month_Year</p><span class='lbrq'></span><span class='lbtt'></span></label><input type='date' class='form-control' id='dateMonthyear' placeholder='Write here...' name='date'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "heading_field": "<div class='form-group' id='heading_field'><label for='headingField' class='' id='heading'><h1 class='lbtx'>Heading</h1></label><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "paragraph_field": "<div class='form-group' id='paragraph_field'><label for='paragraphField' class='' id='paragraph'><h1 class='lbtx'>Paragraph</h1></label><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "input_button": "<div class='form-group' id='input_button'><input type='button' class='btn btn-primary form-control' id='inputButton' value='Submit' name='button'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "accordion_field": "<div class='form-group' id='accordionField'><div class='panel-group' id='accordion'><div class='panel panel-default'><div class='panel-heading'><h4 class='panel-title'><a data-toggle='collapse' data-parent='#accordion' href='#collapse1'>Collapsible Group</a></h4></div><div id='collapse1' class='panel-collapse collapse in'><div class='panel-body sortable droppable'></div></div></div></div>    <div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "radio_list": "<div class='form-group' id='itemradio'><div class='fieldLabel'><p>Radio List</p></div><ul><li><label for='radio1' class=''>Radio</label><input type='radio' class='form-control' id='radio1' name='radio' checked></li></ul><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "multiple_input_text": "",
        "check_list": "<div class='form-group' id='itemchecklist'><div class='fieldLabel'><p>Check List</p></div><ul name='check'><li><label for='check1' class=''>checkbox</label><input type='checkbox' class='form-control' id='check' name='check' checked></li></ul><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "divder_field": "<div class='form-group' id='divder_field'><p class='divder'></p><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "line_break": "<div class='form-group' id='line_break'><p class='linebrake'></p><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div></div>",
        "table_field": "<div class='form-group draggable' id='table_field'><label for='table' id='table' class=''><p class='lbtx'>Table</p><span class='lbrq'></span><span class='lbtt'></span></label><table class='table tableCss'><tr><th class='shubham1'>Header</th><th  class='shubham1'>Header</th></tr><tr><td>Data</td><td>Data</td></tr></table><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        //"checkbox": "<div class='form-group' id='itemchecklist'><ul name='checkbox'><li><label for='checkbox1' class=''>checkbox</label><input type='checkbox' class='form-control' id='checkbox' name='box' checked></li></ul><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "approval_button": "<div class='form-group' id='input_button'><input type='button' class='btn btn-primary form-control' id='approvalButton' value='Approval Button' name='approvalbutton'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "approval_checklist": "<div class='form-group' id='itemchecklist'><ul name='approvalcheck'><li><label for='approvalChecklist' class=''>Approval Checkbox</label><input type='checkbox' class='form-control' id='approvalChecklist' name='check' checked></li></ul><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "upload_button": "<div class='form-group' id='uploadButton'><label class='form-label' for='customFile'>Upload File</label><input type='file' class='form-control' id='customFile' name='upload'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "input_range": "<div class='form-group' id='input_range'><label for='inputRange' class=''>Input Range</label><input type='range' class='form-control' id='inputRange' name='Range'min='1' max='100' value='50'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
        "input_time": "<div class='form-group' id='input_time'><label for='InputTime' class=''><p class='lbtx'>Time</p><span class='lbrq'></span><span class='lbtt'></span></label><input type='time' class='form-control' id='Monthyear' placeholder='Write here...' name='time'><small id='errow' class='fommsg-errow'>We'll never share your email with anyone else.</small><small id='succes' class='fommsg-succes'>We'll never share your email with anyone else.</small><div class='editdelete trans'><span class='edit trans'><i class='fa fa-pencil' aria-hidden='true'></i></span><span class='delete trans'><i class='fa fa-trash-o' aria-hidden='true'></i></span></div></div>",
    }];
    navfieldhtml: any = [{
        "single_input_text": "<li class='trans'><div class='navlistname'><span class='material-symbols-outlined'>text_fields</span><p>Text Fields 1</p></div><div class='navlistdcv'><div class='navlistdelete'><span class='material-symbols-outlined'>delete</span></div><div class='navlistclone'><span class='material-symbols-outlined'>content_copy</span></div><div class='navlistvisibil'><span class='material-symbols-outlined'>visibility</span></div></div></li>",
    }];
    constructor(private renderer: Renderer2, private route: ActivatedRoute,
        private _elogservice: ElogApiServiceServiceProxy,
        private _router: Router,
        private _route: ActivatedRoute,
        private _clientFormsService: ClientFormsServiceServiceProxy,
        private _settingService: SettingServiceProxy,

        private http: HttpClient,) {
        sanitized: DomSanitizer
        // setInterval(() => {
        //     this.autosavetime = new Date()
        //   }, 1000)
    }
    // old functions
    fpropMenu() {
        this.isfpropMenu = !this.isfpropMenu;

    }
    addcompMenu() {
        this.isMenuOpen = !this.isMenuOpen;

    }
    navpanelMenu() {
        this.isnavpanel = !this.isnavpanel;
    }
    // on load function
    ngOnInit() {
        // different type of component
        this.mapforComponent["text"] = "single_input_text";
        this.mapforComponent["search"] = "search_input";
        this.mapforComponent["textarea"] = "text_area_field";
        this.mapforComponent["number"] = "input_number";
        this.mapforComponent["email"] = "input_email";
        this.mapforComponent["password"] = "input_password";
        this.mapforComponent["checkbox"] = "check_list";
        this.mapforComponent["radio"] = "radio_list";
        this.mapforComponent["select-one"] = "select_field";
        this.mapforComponent["month"] = "input_monthyear";
        this.mapforComponent["date"] = "input_date";
        this.mapforComponent["time"] = "input_time";
        this.mapforComponent["button"] = "input_button";
        this.mapforComponent["table"] = "table_field";
        this.mapforComponent["collapse"] = "accordion_field";
        this.mapforComponent["Approval Button"] = "approval_button";
        this.mapforComponent["Approval checkbox"] = "approval_checklist";
        this.mapforComponent["file"] = "upload_button";
        this.mapforComponent["range"] = "input_range";
        this.mapforComponent["heading_field"] = "heading_field";
        this.mapforComponent["paragraph_field"] = "paragraph_field";
        this.mapforComponent["divder_field"] = "divder_field";
        this.mapforComponent["line_break"] = "line_break";
        this.formID = null;
        this._route.params.subscribe(params => {
            if (+params['id']) {
                this.formID = params['id'];
                this.editform(params['id']);
            }
        });
        this.showHideSelect = false;
        this.showHideRange = false;
        this.showHideInput = false;
        this.showHideDate = false;
        this.showHideDateMonth = false;
        this.showHideHeading = false;
        this.showHideNumber = false;
        this.showHideButton = false;
        this.showHideTable = false;
        this.showHideRadio = false;
        this.showHidefile = false;
        this.showHideEmail = false;
        this.showHideCheckbox = false;
        this.showHideCheckList = false;
        this.approvalButton = true;
        this.formNameError = false;
        this.testObject1 = {};
        this.formData = {};
        this.newObject = {};
        this.Ids = 0;
        this.selectedValue8 = '';
        this.selectDefault = "";
        this.selectedValue7 = 'Select';
        this.formName = '';
        this.setWidths = '';
        this.tableDataCount = 1;
        this.counter = 1;
        this.counter1 = 1;
        this.counter2 = 1;
        this.selectCounter = 1;
        this.frequency = false;
        this.autogenerated = false;
        this.unique = false;
        this.getAllTables();
        //this.autosavetime = Date; // moment().format('hh:mm:ss A');
        // setInterval(function () { 
        //     //console.log('========>' + moment().format('hh:mm:ss A') + '========>'); 
        //     this.autosavetime = new Date(); 
        // }, 1000);
        setInterval(() => {
            this.autosavetime = new Date()
        }, 1000)
    }
    // component preview code
    getPreviewModal() {
        //   
        //   console.log(this.newObject)
        //   this.formNewData = this.formData;
        let previewarray = [];
        for (var key in this.formData) {
            if (this.formData[key] != undefined && this.formData[key].field_properties[0].field_type == 'table') {
                var header = this.formData[key].field_properties[0].header;
                var data = this.formData[key].field_properties[0].table_fields;
                const doc = document.getElementById("excel-table");
                var tbody = document.createElement('tbody');
                var tr = document.createElement('tr');
                var newTableHeading = document.createElement('tr');
                var flag = false;
                for (var keys in header) {
                    var th = document.createElement('th');
                    var text1 = document.createTextNode(header[keys].header_text);
                    th.appendChild(text1);
                    tr.appendChild(th);
                    th.style.textAlign = "center";
                    if (header[keys].header_child.length > 0) {
                        th.colSpan = header[keys].header_child.length;
                        if (header[key].header_child.length > 1) {
                            flag = true;
                            for (var k = 0; k < header[key].header_child.length; k++) {
                                var trs = document.createElement('th');
                                trs.id = header[key].header_child.header_text;
                                trs.classList.add('shubham1');
                                trs.innerText = 'Heading';
                                newTableHeading.appendChild(trs);
                            }
                        }
                        else {
                            th.rowSpan = 2;
                        }
                    }
                }
                tbody.appendChild(tr);
                if (flag) {
                    tbody.appendChild(newTableHeading);
                }
                var rows = this.formData[key].field_properties[0].no_rows - 1;
                var columns = this.formData[key].field_properties[0].no_column;
                var tr1; var l = 0; var fieldType;
                for (var k = 0; k < rows; k++) {
                    tr1 = document.createElement('tr');
                    for (var j = 0; j < columns; j++) {
                        var td = document.createElement('td');
                        td.id = this.formData[key].field_properties[0].table_fields[l].td_text;
                        if (this.formData[key].field_properties[0].table_fields[l].td_data[td.id] != undefined) {
                            const elementAppend: HTMLDivElement = this.renderer.createElement('div');
                            for (let value of Object.values(this.fieldhtml)) {
                                fieldType = this.formData[key].field_properties[0].table_fields[l].td_data[td.id].field_properties[0].field_type;
                                elementAppend.innerHTML = value[this.mapforComponent[fieldType]];
                                td.appendChild(elementAppend);
                            }
                        }
                        else {
                            td.appendChild(document.createTextNode("Data"));
                        }
                        tr1.appendChild(td);
                        l += 1;
                    }
                    tbody.appendChild(tr1);
                }
                if (flag) {
                    var x = 0;
                    var tr2 = tbody.getElementsByTagName("tr");
                    if (tr2[1].children[0].nodeName.indexOf('TH') != -1) {
                        x = 2;
                    }
                    else {
                        x = 1;
                    }
                    for (var p = x; p < tr2.length; p++) {
                        for (var j = 0; j < 1; j++) {
                            var newHeadng = document.createElement('td');
                            newHeadng.id = 'Data';
                            newHeadng.classList.add('shubham1');
                            newHeadng.innerText = 'Data';
                            var clones = newHeadng.cloneNode(true);
                            tr2[p].appendChild(newHeadng);
                            //tr2[i].insertBefore(newHeadng, tr2[i].children[insertAfters]);
                        }
                    }
                }
                doc.appendChild(tbody);
            }
            else if (this.formData[key] != undefined && this.formData[key].field_properties[0].field_type == 'collapse') {
                var formkey = this.formData[key].field_properties[0].inputs_fields;
                const docs = document.getElementById('accordionFieldNew');
                for (var key in formkey) {
                    if (formkey[key] != undefined) {
                        const elementAppend: HTMLDivElement = this.renderer.createElement('div');
                        for (let value of Object.values(this.fieldhtml)) {
                            fieldType = formkey[key].field_properties[0].field_type;
                            if (fieldType != 'collapse') {
                                elementAppend.innerHTML = value[this.mapforComponent[fieldType]];
                                docs.firstChild.firstChild.childNodes[1].firstChild.appendChild(elementAppend);
                            }
                        }
                    }
                }
            }
            previewarray.push(this.formData[key]);
        }
        this.formNewData = previewarray;


    }

    // POC for showPreview start

    showPreview() {
        var htmlsStore = $("#dropzone").html();
        $('#previewModal .modal-content').append(htmlsStore);
    }
    // POC for showPreview end

    // make fields on edit (optimized code)
    editform(ID: any) {
        this._clientFormsService.get(ID).subscribe(data => {
            this.EditArrayForm = data;
            const FormJson = JSON.parse(this.EditArrayForm.formJson);
            this.formName = data.formName;
            this.isformstatus = data.isActive;
            this.formstartdate = data.formStartDate;
            this.formenddate = data.formEndDate;
            this.frequency = FormJson.inputfrequency;
            this.newObject["formData"] = this.formData;
            var fieldType;
            for (var i = 0; i < FormJson.form_fields.length; i++) {
                fieldType = FormJson.form_fields[i].field_properties[0].field_type;
                this.labelText = FormJson.form_fields[i].label.name;
                this.formData[this.labelText] = FormJson.form_fields[i];
                this.showFieldEdit(this.mapforComponent[fieldType], this.labelText);
                // else if (FormJson.form_fields[i].field_properties[0].field_type == 'checkbox') {
                //     this.labelText = FormJson.form_fields[i].label.name;
                //     this.formData[this.labelText] = FormJson.form_fields[i];
                //     this.showFields('checkbox');
                // }
            }
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        })
    }
    // no use
    EditsetLabelText(data) {
        if (data) {
            this.labelText = data
            this.selectInputFieldForBinding(data);
        }
    }
    SetFormActive(data) {
        if (data) {
            this.isformstatus = data.currentTarget.checked;
        }
    }

    //  cr_bci_0001 start
    saveOrUpdate() {
        var stringName = "";
        var container, inputs, index;
        this.veps = 'null';
        container = document.getElementById('dropzone');
        var form_name = this.formName.replace(/ /g, "_");
        var db_table = "elog3_" + form_name;
        var form_code = "";
        var formstatus = this.isformstatus;
        var formstartdate = this.formstartdate;
        var formenddate = this.formenddate;
        var inputfrequency = this.frequency;
        // var notifType = this.notifType;
        // var notifRole = this.notifRole;
        // var notifEmail = this.notifEmail;
        // var notifNumber = this.notifNumber;
        // var notifRepeat = this.notifRepeat;
        // var notifStartDate = this.notifStartDate;
        // var notifEndDate = this.notifEndDate;
        var noDB = ["devider", "heading", "line_break", "lineBreak", "button", "heading_field", "paragraph_field", "divder_field", "submit", "reset"];
        var form_fields = [];
        // this.formData["Table_1"] = {
        //     "label" : [
        //         {
        //         "name" : "",
        //         }
        //     ],
        //     "grid_system": [
        //         {
        //         "width": "col-md-12"
        //         }
        //     ],
        //     "field_properties": [
        //         {"placeholder":"","field_type":"table","field_type_html":"","css_attribute":{},"no_column":4,"no_rows":3,"table_fields":[{"t_row":[{"td_type":"","td_text":"Header 1","rowSpan":"2","header_child":[]},{"td_type":"","td_text":"Header 2","rowSpan":"2","header_child":[]},{"td_type":"","td_text":"Header 3","colSpan":"2","header_child":[{"td_type":"","td_text":"Header 9","header_child":[]},{"td_type":"","td_text":"Header 10","header_child":[]}]},{"td_type":"","td_text":"Header 4","rowSpan":"2","header_child":[]},]},{"t_row":[{"td_type":"","td_text":"Data1","td_data":[]},{"td_type":"","td_text":"Data2","td_data":[]},{"td_type":"","td_text":"Data3","td_data":[]},{"td_type":"","td_text":"Data4","td_data":[]},]},{"t_row":[{"td_type":"","td_text":"Data5","td_data":[]},{"td_type":"","td_text":"Data6","td_data":[]},{"td_type":"","td_text":"Data7","td_data":[]},{"td_type":"","td_text":"Data8","td_data":[]},]},]}        ]
        //   };
        for (var key in this.formData) {
            if (this.formData[key] != undefined) {
                form_fields.push(this.formData[key]);
                if (noDB.indexOf(this.formData[key].field_properties[0].field_type) == -1) {
                    stringName += this.formData[key].label.name + ' VARCHAR(20),';
                }
            }
            // if(key.indexOf('Table')!=-1){
            //     var xpath = "//*[text()='" + this.formData[key].label.name + "']";
            //     this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            //     const documents = this.matchingElement["offsetParent"];
            //     var tbody = documents.getElementsByTagName('tbody');
            //     for(var i=1;i<tbody[0].children.length;i++){
            //         var tableChildren = tbody[0].children[i].children;
            //         for(var j=0;j<tableChildren.length;j++){
            //             if (this.formData[key]["field_properties"] && tableChildren[j].id.indexOf('Data') != -1) {
            //                 var formKey = this.formData[key]["field_properties"][0]["table_fields"]
            //                 for(var keys=0;keys<formKey.length;keys++){
            //                     if(tableChildren[j].id == formKey[keys].td_text){
            //                         this.arrForm.push({td_type: '', td_text: tableChildren[j].id, td_data:this.formData[this.getInputName]["field_properties"][0]["table_fields"][keys].td_data})
            //                     }
            //                 }
            //             } 
            //         }
            //     }
            //     this.formData[key]["field_properties"][0]["table_fields"] = this.arrForm;
            // }
            // 26-4- shubham if(key.indexOf('Collapsible_Group')!=-1){
            //     for(keyss in this.formData[key]["field_properties"][0].inputs_fields){
            //         this.arrNewform.push(this.formData[key]["field_properties"][0].inputs_fields[keyss]);
            //     }
            // }
        }

        // 26-4- shubham for(var keyss in this.arrForm){
        //     this.formData[this.getInputName]["field_properties"][0]["table_fields"] = '';
        // this.formData[this.getInputName]["field_properties"][0]["table_fields"] = new Array();
        //     if(this.arrForm[keyss].td_data.length != 0){
        //         for(var keysss in this.arrForm[keyss].td_data){
        //             this.arrayFromObject.push(this.arrForm[keyss].td_data[keysss]);
        //             this.formData[this.getInputName]["field_properties"][0]["table_fields"].push({td_type: '', td_text: this.arrForm[keyss].td_text, td_data:this.arrayFromObject})
        //             this.arrayFromObject=[];
        //         }
        //     }
        //     else{
        //         this.formData[this.getInputName]["field_properties"][0]["table_fields"].push({td_type: '', td_text: this.arrForm[keyss].td_text, td_data:new Array()})
        //     }
        // }

        // 26-4- shubham for(var keysss in this.arrNewform){
        //     this.formData[this.getInputName]["field_properties"][0]["inputs_fields"] = '';
        // this.formData[this.getInputName]["field_properties"][0]["inputs_fields"] = new Array();
        //     this.formData[this.getInputName]["field_properties"][0].inputs_fields.push(this.arrNewform[keysss]);
        // }
        let obj = { form_name, db_table, form_code, inputfrequency, form_fields, form_action: [] };
        // Find its child `input` elements
        inputs = container.getElementsByClassName('form-group');
        // for (var i = 0; i < inputs.length; i++) {
        //     this.grid = "50";
        //     if (this.grid == "50") {
        //         this.grid = "col-md-6";
        //     }
        //     else if (this.grid == "100") {
        //         this.grid = "col-md-12"
        //     }
        //     else {
        //         this.grid = "col-md-4"
        //     }
        // }
        obj.form_action.push({ action_type: container.method, redirect_url: container.action, post_to: "db", authType: "default", auth_value: "" });
        var array = obj;
        console.log(obj);
        var tyu = JSON.stringify(array);
        // this.modules2["clientId"]=form_name.toLowerCase();
        // this.modules2["formStartDate"]=moment();
        // this.modules2["formEndDate"]=moment();
        // this.modules2["isActive"]=true;
        // this.modules2["creationDate"]=moment();
        // this.modules2["modifiedDate"]=moment();
        // this.modules2["Id"]=0;
        // this.modules2["formJson"]=tyu.toString();
        // abp.ui.setBusy();

        if (this.formID != null) {
            this.modules2 = {
                "clientId": 0,
                "formName": form_name.toLowerCase(),
                "formStartDate": formstartdate,
                "formEndDate": formenddate,
                "formJson": tyu.toString(),
                "isActive": formstatus,
                "creationDate": moment(),
                "modifiedDate": moment(),
                "id": this.formID
            };
            this._clientFormsService.update(this.modules2).subscribe((res: ClientFormsDto) => {
                this.modules2 = res;
                if (res) {
                    stringName = stringName.replace(/,\s*$/, "");
                    const tableName = 'elog3_' + form_name.toLowerCase(); const actionType = "CREATE";
                    setTimeout(() => {
                        this._router.navigate(['../../log-forms-list/'], { relativeTo: this._route });
                    }, 200);
                       this._elogservice.getspTableStructureToBeCreate(tableName, stringName, actionType).subscribe((res) => {
                           abp.ui.clearBusy();
                           alert("Log has been created successfully!!");
                           setTimeout(() => {
                               this._router.navigate(['../log-forms-list/'], { relativeTo: this._route });
                           }, 200);

                       });
                }
            });

        }
        else {
            this.modules2 = {
                "clientId": 0,
                "formName": form_name.toLowerCase(),
                "formStartDate": formstartdate,
                "formEndDate": formenddate,
                "formJson": tyu.toString(),
                "isActive": formstatus,
                "creationDate": moment(),
                "modifiedDate": moment(),
                "id": 0
            };

            if (this.formName != null && this.formName != "" && this.formName != undefined) {
                this._clientFormsService.create(this.modules2).subscribe((res: ClientFormsDto) => {
                    this.modules2 = res;
                    if (res) {
                        stringName = stringName.replace(/,\s*$/, "");
                        const tableName = 'elog3_' + form_name.toLowerCase(); const actionType = "CREATE";
                        setTimeout(() => {
                            this._router.navigate(['../log-forms-list/'], { relativeTo: this._route });
                        }, 200);
                        console.log(obj)
                        this._elogservice.getspTableStructureToBeCreate(tableName, stringName, actionType).subscribe((res) => {
                            abp.ui.clearBusy();
                            alert("Log has been created successfully!!");
                            setTimeout(() => {
                                this._router.navigate(['../log-forms-list/'], { relativeTo: this._route });
                            }, 200);

                        });
                    }
                });
            }
            else {
                alert('form name should not be empty');
            }
        }
        document.getElementById('output2').textContent = JSON.stringify(obj, undefined, 2);
        //  });
    }
    // get all tables
    getAllTables() {
        this._elogservice.all_showAllTables().subscribe((res: any) => {
            this.modules = res;
            localStorage.setItem('All_Table', JSON.stringify(res));
        });
    }
    // set binding relation
    showBindingRelation(data) {
        if (data) {
            this.selectedValue1 = data;
            //this.selectedValue = null;
            this.bindingColumns = null;
            this.displayColumns = null;
            this.setCommonJson(data, 'dependency_attributes', 'bindingRelation');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
    }
    // show columns of tables
    showCurrentTableColumn(data) {
        if (data) {
            this._elogservice.showTableColumns(data).subscribe((res: any) => {
                this.modules1 = res;
                this.veps = data;
            });
            this.setCommonJson(data, 'dependency_attributes', 'db_table');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            // function getText(offPer, getTableInputName) {
            //     if (offPer.nodeName.toLowerCase() == 'tbody') {
            //         var tr = offPer.getElementsByTagName("tr");
            //         var nums = getTableInputName.match(/(\d+)/)
            //         for (var i = 1; i < tr.length; i++) {
            //             tr[i].children[nums[0] - 1].style.backgroundColor = '#f5f5f5';  //backgroundColor,pointerEvents
            //             tr[i].children[nums[0] - 1].style.pointerEvents = 'none';  //backgroundColor,pointerEvents
            //             tr[i].children[nums[0] - 1].children[0].style.display = 'none';
            //             tr[i].children[nums[0] - 1].children[1].style.display = 'none';
            //             tr[i].children[nums[0] - 1].innerText = 'value from DB';
            //         }
            //     }
            //     else {
            //         for (let child of offPer.childNodes) {
            //             getText(child, getTableInputName)
            //         }
            //     }
            // }
            // if (this.matchingElement) {
            //     if (this.getInputName.indexOf('Table') != -1) {
            //         getText(this.matchingElement["offsetParent"], this.getTableInputName);
            //     }
            // }
        }
        else {
            console.log("table name can't  be empty");
        }
    }
    // set log properties start date, end date
    SetFormEndDate(data) {
        if (data) {
            //this.formenddate=moment(data.value).format('YYYY-MM-DD HH:mm:ss');
            this.formenddate = data.value;
            console.log(this.formenddate);
        }
    }
    SetFormStartDate(data) {
        if (data) {
            //this.formstartdate=moment(data.value).format('YYYY-MM-DD HH:mm:ss');
            this.formstartdate = data.value;
            console.log(this.formstartdate);
        }
    }
    // Binding Property code
    // display column
    setStateAsActive(state) {
        this.displayColumns = state;
        this.setCommonJson(state, 'dependency_attributes', 'display_column');
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // binding column
    setStateAsActives(state) {
        this.bindingColumns = state;
        this.setCommonJson(state, 'dependency_attributes', 'binding_column');
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // filter column
    setStateAsActiv(state) {
        this.filterColumns = state;
        this.setCommonJson(state, 'dependency_attributes', 'filter_column');
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // parent field
    setParentField(data) {
        //store current parent fields in local storage
        this.selectedValue3 = data;
        if (this.selectedValue2 == 'Autofill') {
            this.setCommonJson(data, 'dependency_attributes', 'parent_field');
        }
        else {
            this.selectedValue = null;
            this.bindingColumns = null;
            this.displayColumns = null;
            this.filterColumns = null;
            this.setCommonJson(data, 'dependency_attributes', 'parent_field');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            //this.selectInputFieldForBinding(data);
        }
    }
    // relation type
    showRelationType(state) {
        this.selectedValue2 = state;
        this.setCommonJson(state, 'dependency_attributes', 'relation_type');
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // set form name
    setFormName(data) {
        if (data) {
            this.formName = data.value;
            this.formNameError = false;
            this._clientFormsService.getAll(null, null, null, null, 0, null, null, null, null, 0, 10).subscribe((res: any) => {
                res.items.forEach(element => {
                    if (element.formName == data.value) {
                        this.formNameError = true;
                        this.formName = '';
                        data.value = '';
                    }
                });
            });
        }
    }
    // set label to all component
    setLabelText(data) {
        this.labelText = data.value; // setting label to ngModel
        var shubham = data.value; // storing new label to another variable
        // delete previous label
        var previousLabel = Object.keys(this.testObject1).find(key => this.testObject1[key] === this.getInputName);
        delete this.testObject1[previousLabel];
        // get active node
        if (this.getTableInputName) {
            var xpath = "//*[text()='" + this.getTableInputName + "']";
            //this.getInputName = this.getTableInputName;
        }
        else {
            var xpath = "//*[text()='" + this.getInputName + "']";
        }
        this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (this.matchingElement == null) {
            this.matchingElement = document.querySelector('[name="' + this.getInputName + '"]') ? document.querySelector('[name="' + this.getInputName + '"]') : document.querySelector('#' + this.getInputName);
        }
        const button = this.matchingElement; // set current label to new variable
        var offsetParent = button["offsetParent"]; // get offset parent of current label
        var element, element1 = "";
        function getText(offPer) {
            if (offPer.classList != undefined && offPer.classList.length > 0 && offPer.classList.contains('editdelete')) {
                element = offPer; // get event listener function
            }
            if (offPer.classList != undefined && offPer.classList.length > 0 && offPer.classList.contains('shubham')) {
                element = offPer; // get event listener function
            }
            if (offPer.nodeName.toLowerCase() == 'input' || offPer.nodeName.toLowerCase() == 'textarea' || offPer.nodeName.toLowerCase() == 'select') {
                element1 = offPer; // get any input available
            }
            else {
                for (let child of offPer.childNodes) {
                    getText(child)
                }
            }
        }
        getText(offsetParent); // get edit button on which previous event listener present
        if (this.getTableInputName) {
            element.removeEventListener("click", this.selectInputFieldForBinding(this.getTableInputName)); // remove previous label event listener for table
        }
        else {
            element["firstChild"].removeEventListener("click", this.selectInputFieldForBinding(this.getInputName)); // remove previous label event listener for other component
        }
        if (this.getTableInputName) {
            var xpath = "//*[text()='" + this.getInputName + "']";
            this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        }
        // copy previous label json to new label json
        var parentJsonObject = new Object();
        var jsonObject;
        parentJsonObject["jsonObject"] = jsonObject;
        // for table
        if (this.getTableInputName != undefined) {
            if (this.getTableInputName.indexOf('Header') != -1 || (this.matchingElement && this.matchingElement.id == 'headerData')) {
                if (this.newObject["formData"][this.tableName] != undefined && this.newObject["formData"][this.tableName]["field_properties"][0]["header"]) {
                    var headers = this.newObject["formData"][this.tableName]["field_properties"][0]["header"];
                    for (var i = 0; i < headers.length; i++) {
                        if (headers[i].header_text == this.getTableInputName) {
                            if (data.value) {
                                this.newObject["formData"][this.tableName]["field_properties"][0]["header"][i].header_text = data.value;
                            }
                            //jsonObject = this.newObject["formData"][this.tableName]["field_properties"][0]["header"][i].header_text;
                        }
                    }
                }
            }
            else if (!(this.getTableInputName.indexOf('Table') != -1) || (this.getTableInputName.indexOf('Data') != -1 || (this.matchingElement && this.matchingElement.id == 'tableData'))) {
                if (this.newObject["formData"][this.tableName] != undefined && this.newObject["formData"][this.tableName]["field_properties"][0]["table_fields"]) {
                    var tableFields = this.newObject["formData"][this.tableName]["field_properties"][0]["table_fields"];
                    for (var i = 0; i < tableFields.length; i++) {
                        if (tableFields[i].td_text == this.getTableInputName) {
                            jsonObject = this.newObject["formData"][this.tableName]["field_properties"][0]["table_fields"][i]["td_data"]
                            if (jsonObject[this.getTableInputName]) {
                                jsonObject[this.getTableInputName].label.name = data.value.replace(/ /g, '_');
                                jsonObject[this.getTableInputName].label.DisplayName = data.value;

                            }
                        }
                    }
                }
            }
        }
        // for artisan
        else if (this.getInputArtisan != undefined && this.newObject["formData"][this.getInputArtisan] != undefined &&
            this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"] != undefined &&
            this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]) {
            jsonObject = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"];
            jsonObject[this.getInputName].label.name = data.value.replace(/ /g, '_');
            jsonObject[this.getInputName].label.name = data.value;
            if (this.getInputName !== data.value) {
                Object.defineProperty(jsonObject, data.value, Object.getOwnPropertyDescriptor(jsonObject, this.getInputName));
                delete jsonObject[this.getInputName];
            }
        }
        // for all other component
        else if (this.newObject["formData"][this.getInputName]) {
            this.newObject["formData"][this.getInputName].label.name = data.value.replace(/ /g, '_');
            this.newObject["formData"][this.getInputName].label.DisplayName = data.value;
            if (this.getInputName !== data.value) {
                Object.defineProperty(this.newObject["formData"], data.value, Object.getOwnPropertyDescriptor(this.newObject["formData"], this.getInputName));
                delete this.newObject["formData"][this.getInputName];
            }
        }
        this.labelText = data.value; // setting label to ngModel
        this.getInputName = data.value; // set new label name to active variable
        // if(this.getTableInputName){
        //     this.getTableInputName = data.value;// set new label name to active variable
        // }
        if (this.getTableInputName) {
            element.addEventListener("click", (event: Event) => { // add edit function  with new label name for table
                this.selectInputFieldForBinding(shubham);
            });
        }
        else {
            element["firstChild"].addEventListener("click", (event: Event) => { // add edit function  with new label name for other component
                this.selectInputFieldForBinding(shubham);
            });
        }
        if (!(this.getTableInputName)) {
            element["children"][1].addEventListener("click", (event: Event) => { // add delete function  with new label name for other component
                this.deDelectInputFieldForBinding(shubham);
            });
        }

        if (button["type"] == 'checkbox') {
            button.previousSibling.innerText = data.value; // set new label to previous label in html in checkbox
        }
        else if (button["type"] == 'submit' || button["type"] == 'reset' || button["type"] == 'button') {
            button["value"] = data.value; // set new label to previous label in html in buttton
        }
        if (this.getTableInputName) {
            this.matchingElement["innerText"] = data.value; // set new label to previous label in html in table
        }
        else {
            button["innerText"] = data.value; // set new label to previous label in html in other component
        }

        if (element1) {
            element1["name"] = data.value // also set name if any input,select,textarea present for given component
        }

        this.testObject1[this.labelText] = this.getInputName; // set parent field value 
        element1 = undefined; // reset label 
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2); // show json on page
    }
    setStaticSection(data) {
        this.staticSection = data.value;
        if (data.checked) {
            if (this.getInputArtisan) {
                if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]) {
                    const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"];
                    product["depedency_on"] = 'static';
                }
            }
            else if (this.newObject["formData"][this.getInputName]["dependency_attributes"]) {
                this.newObject["formData"][this.getInputName]["dependency_attributes"]["depedency_on"] = 'static';
            }
        }
        else {
            if (this.getInputArtisan) {
                if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]) {
                    const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"];
                    product["depedency_on"] = 'DB';
                }
            }
            else if (this.newObject["formData"][this.getInputName]["dependency_attributes"]) {
                this.newObject["formData"][this.getInputName]["dependency_attributes"]["depedency_on"] = 'DB';
            }
        }
        this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["dependent"] = true;
        this.newObject["formData"][this.getInputName]["dependency_attributes"]["dependent"] = true;
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // set fontsize of component label
    setfontfamli1(data) {
        this.selectedValue7 = data;
        if (this.matchingElement == undefined || this.matchingElement == null || this.matchingElement == "") {
            var xpath = "//*[text()='" + this.getInputName + "']";
            this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        }
        const button = this.matchingElement;
        if ((button.id).indexOf('label') != -1) {
            button["style"].fontSize = data;
        }
        if (button["type"] == 'button' || button["type"] == 'reset' || button["type"] == 'submit') {
            button["style"].fontSize = data;
            this.selectedValue17 = data;
            this.setCommonJson(data, 'label', 'css_attribute');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
        if (button["type"] == 'checkbox') {
            button.previousSibling["style"].fontSize = data;
            this.setCommonJson(data, 'label', 'css_attribute');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
        else {
            button.style.fontSize = data;
            this.setCommonJson(data, 'label', 'css_attribute');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
    }
    setButtonName(data) {
        this.fieldType = data.value;
        // get active node
        var xpath = "//*[text()='" + this.getInputName + "']";
        this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (this.matchingElement == null) {
            this.matchingElement = document.querySelector('[name="' + this.getInputName + '"]') ? document.querySelector('[name="' + this.getInputName + '"]') : document.querySelector('#' + this.getInputName);
        }
        const button = this.matchingElement;
        button["type"] = data.value;
        if (this.getInputArtisan) {
            if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"];
                product[0]["field_type"] = data.value;
            }
        }
        else if (this.newObject["formData"][this.getInputName]["field_properties"]) {
            this.newObject["formData"][this.getInputName]["field_properties"][0]["field_type"] = data.value;
        }
        // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // set color of component label
    setLabelColor(data) {
        this.labelColor = data.value;
        $('.colorValue').text(this.labelColor);
        if (this.matchingElement == undefined || this.matchingElement == null || this.matchingElement == "") {
            var xpath = "//*[text()='" + this.getInputName + "']";
            this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        }
        const button = this.matchingElement;
        if ((button.id).indexOf('heading') != -1 || button.id.indexOf('paragraph') != -1) {
            button["children"][0]["style"].color = data.value;
        }
        if (button["type"] == 'button' || button["type"] == 'reset' || button["type"] == 'submit') {
            button["style"].color = data.value;
            this.setCommonJson(data.value, 'label', 'css_attribute');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
        if (button["type"] == 'checkbox') {
            button.previousSibling["style"].color = data.value;
            this.setCommonJson(data.value, 'label', 'css_attribute');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
        else {
            if ((button.id).indexOf('label') != -1) {
                button["style"].fontSize = data.value;
            }
            else {
                button.style.color = data.value;
                this.setCommonJson(data.value, 'label', 'css_attribute');
                document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
        }
    }
    // set width of component
    setWidth(data) {
        this.setWidths = data;
        if (this.matchingElement == undefined || this.matchingElement == null || this.matchingElement == "") {
            var xpath = "//*[text()='" + this.getInputName + "']";
            this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        }
        if (data == 'col-md-6') {
            const button = this.matchingElement;
            const divs = button.offsetParent;
            // [divs.parentNode["className"]] = ' ';
            // divs.parentNode["classList"].add('width50');
            for (let i = divs.parentNode['classList'].length - 1; i >= 0; i--) {
                const className = divs.parentNode['classList'][i];
                if (className.startsWith('width')) {
                    divs.parentNode['classList'].remove(className);
                }
            }
            divs.parentNode["classList"].add('width50');
            this.setCommonJson(data, 'grid_system', 'width');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
        if (data == 'col-md-12') {
            const button = this.matchingElement;
            const divs = button.offsetParent;
            // [divs.parentNode["className"]] = ' ';
            // divs.parentNode["classList"].add('width100');
            for (let i = divs.parentNode['classList'].length - 1; i >= 0; i--) {
                const className = divs.parentNode['classList'][i];
                if (className.startsWith('width')) {
                    divs.parentNode['classList'].remove(className);
                }
            }
            divs.parentNode["classList"].add('width100');
            this.setCommonJson(data, 'grid_system', 'width');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
        if (data == 'col-md-4') {
            const button = this.matchingElement;
            const divs = button.offsetParent;
            // [divs.parentNode["className"]] = ' ';
            // divs.parentNode["classList"].add('width30');
            for (let i = divs.parentNode['classList'].length - 1; i >= 0; i--) {
                const className = divs.parentNode['classList'][i];
                if (className.startsWith('width')) {
                    divs.parentNode['classList'].remove(className);
                }
            }
            divs.parentNode["classList"].add('width30');
            this.setCommonJson(data, 'grid_system', 'width');
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
    }
    // heading/paragraph size
    setfontsize(data) {
        this.selectedValue8 = data;
        if (this.matchingElement == undefined || this.matchingElement == null || this.matchingElement == "") {
            var xpath = "//*[text()='" + this.getInputName + "']";
            this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        }
        const button = this.matchingElement; //
        if (data == 'H1') {
            button.style.fontSize = '24px';
            if (this.getInputArtisan) {
                if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                    const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["label"];
                    product["css_attribute"]["headingSize"] = data;
                }
            }
            else if (this.newObject["formData"][this.getInputName]["label"]) {
                this.newObject["formData"][this.getInputName]["label"]["css_attribute"]["headingSize"] = data;
            }
        }
        else if (data == 'H2') {
            button.style.fontSize = '22px';
            if (this.getInputArtisan) {
                if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                    const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["label"];
                    product["css_attribute"]["headingSize"] = data;
                }
            }
            else if (this.newObject["formData"][this.getInputName]["label"]) {
                this.newObject["formData"][this.getInputName]["label"]["css_attribute"]["headingSize"] = data;
            }
        }
        else if (data == 'H3') {
            button.style.fontSize = '20px';
            if (this.getInputArtisan) {
                if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                    const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["label"];
                    product["css_attribute"]["headingSize"] = data;
                }
            }
            else if (this.newObject["formData"][this.getInputName]["label"]) {
                this.newObject["formData"][this.getInputName]["label"]["css_attribute"]["headingSize"] = data;
            }
        }
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // for type file of input
    setFileTypes(data) {
        if (this.getInputArtisan) {
            if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                product["fileTypes"] = data;
            }
        }
        else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
            this.newObject["formData"][this.getInputName]["validation_properties"]["fileTypes"] = data;
        }
        // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // for file type size
    setFileSize(data) {
        this.fileSize = data.value;
        if (this.getInputArtisan) {
            if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                product["fileSize"] = data;
            }
        }
        if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
            this.newObject["formData"][this.getInputName]["validation_properties"]["fileSize"] = data.value;
        }
        // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // set which edit functionality should be shown for which component
    commonShowHide(data) {
        this.showHideSelect = false;
        this.showHideDateMonth = false;
        this.showHideInput = false;
        this.showHideDate = false;
        this.showHideHeading = false;
        this.showHideNumber = false;
        this.showHideButton = false;
        this.showHideEmail = false;
        this.showHideRadio = false;
        this.showHideCheckList = false;
        this.showHideCheckbox = false;
        this.showHideRange = false;
        this.showHidefile = false;
        this.showHideTable = false;
        this[data] = true;

    }
    // make particular element active and get it's value from json on active
    selectInputFieldForBinding(data) {
        if (data) {
            // set current field
            if (!(data.indexOf('Header') != -1 || data.indexOf('Data') != -1)) {
                this.getInputName = data;
            }
            if (data.indexOf('Table') != -1 && !(data.indexOf('Header') != -1 || data.indexOf('Data') != -1)) {
                if (!this.tableArray.includes(data)) {
                    this.tableArray.push(data);
                }
                for (var i = 0; i < this.tableArray.length; i++) {
                    if (data == this.tableArray[i]) {
                        this.tableName = this.tableArray[i];
                    }
                }
                this.getTableInputName = null;
            }
            if (this.getTableInputName) {
                var xpath = "//*[text()='" + data + "']";
                this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            }
            if (data.indexOf('Header') != -1 || data.indexOf('Data') != -1 || (this.matchingElement != undefined && this.matchingElement.id == 'tableData') ||
                (this.matchingElement != undefined && this.matchingElement.id == 'headerData')) {
                this.getTableInputName = data;
                //this.getInputName=undefined
            }
            if (data.indexOf('Collapsible_Group') != -1) {
                this.getInputArtisan = data;
                if (!(this.getInputArtisanArray.includes(data))) {
                    this.getInputArtisanArray.push(data);
                }
                console.log(this.getInputArtisan)
            }
            const container1 = document.getElementById('dropzone');
            const inputs = container1.getElementsByClassName('form-group');
            if (this.getTableInputName) {
                var xpath = "//*[text()='" + this.getTableInputName + "']";
            }
            else {
                var xpath = "//*[text()='" + this.getInputName + "']";
            }
            this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            if (this.getTableInputName == undefined) {
                if (this.matchingElement == null) {
                    this.matchingElement = document.querySelector('[name="' + this.getInputName + '"]') ? document.querySelector('[name="' + this.getInputName + '"]') : document.querySelector('#' + this.getInputName);
                }
                else {
                    var element1 = "", element2 = "";
                    function getText(offPer) {
                        if (offPer.nodeName.toLowerCase() == 'input' || offPer.nodeName.toLowerCase() == 'textarea' || offPer.nodeName.toLowerCase() == 'select') {
                            element1 = offPer;
                        }
                        if (offPer.nodeName.toLowerCase() == 'label') {
                            element2 = offPer;
                        }
                        else {
                            for (let child of offPer.childNodes) {
                                getText(child)
                            }
                        }
                    }
                    getText(this.matchingElement["offsetParent"]);
                }
            }
            var button = element1 != undefined ? element1 : this.matchingElement;
            if (element == "") {
                button = this.matchingElement;
            }
            if (this.getTableInputName) {
                button = this.matchingElement
            }
            if (button == null || button == "") {
                button = element2;
            }
            if (this.getInputName) {
                // for(var key in this.mapforComponent){
                //     if(this.getInputName.indexOf(key)){
                //         this.commonShowHide(this.mapforComponent[key]);  
                //     }
                // } 
                if (this.getInputName.indexOf('Text_Field') != -1 || this.getInputName.indexOf('TextArea_Field') != -1) {
                    this.commonShowHide('showHideInput');
                }

                else if (this.getInputName.indexOf('Radio_List') != -1) {
                    this.commonShowHide('showHideRadio');
                }
                else if (this.getInputName.indexOf('Select_Field') != -1) {
                    this.commonShowHide('showHideSelect');
                }
                else if (this.getInputName.indexOf('Check_List') != -1 && !(this.getInputName.indexOf('Approval_Checkbox') != -1)) {
                    this.commonShowHide('showHideCheckList');
                }
                else if (this.getInputName.indexOf('Checkbox') != -1 || (this.getInputName.indexOf('Approval_Checkbox') != -1)) {
                    this.commonShowHide('showHideCheckbox');
                }
                else if (this.getInputName.indexOf('Number_Field') != -1) {
                    this.commonShowHide('showHideNumber');
                }
                else if (this.getInputName.indexOf('Email_address') != -1 || this.getInputName.indexOf('Search_Field') != -1 ||
                    this.getInputName.indexOf('Password') != -1) {
                    this.commonShowHide('showHideEmail');
                }
                else if (this.getInputName.indexOf('Date_Month_Year') != -1) {
                    this.commonShowHide('showHideDate');
                }
                else if (this.getInputName.indexOf('Date_Time') != -1 || this.getInputName.indexOf('Time') != -1 || this.getInputName.indexOf('Collapsible_Group') != -1) {
                    this.commonShowHide('showHideDateMonth');
                }
                else if (this.getInputName.indexOf('Button') != -1) {
                    this.commonShowHide('showHideButton');
                    this.approvalButton = false;
                }
                else if (this.getInputName.indexOf('Heading') != -1 || this.getInputName.indexOf('Paragraph') != -1) {
                    this.commonShowHide('showHideHeading');
                }
                else if (this.getInputName.indexOf('upload_button') != -1) {
                    this.commonShowHide('showHidefile');
                }
                else if (this.getInputName.indexOf('input_range') != -1) {
                    this.commonShowHide('showHideRange');
                }
                else if (this.getInputName.indexOf('Table') != -1) {
                    this.commonShowHide('showHideTable');
                }
                else {
                    this.showHideSelect = false;
                    this.showHideDateMonth = false;
                    this.showHideInput = false;
                    this.showHideDate = false;
                    this.showHideHeading = false;
                    this.showHideNumber = false;
                    this.showHideButton = false;
                    this.showHideEmail = false;
                    this.showHideRadio = false;
                    this.showHideCheckList = false;
                    this.showHideCheckbox = false;
                    this.showHideRange = false;
                    this.showHidefile = false;
                    this.showHideTable = false;
                }
            }
            if (this.getTableInputName != undefined) {
                if (this.getTableInputName.indexOf('Header') != -1 || this.getTableInputName.indexOf('Data') != -1) {
                    //if (this.matchingElement != null && this.matchingElement != "") {

                    //var xpath = "//*[text()='" + this.getTableInputName + "']";
                    var xpath = "//*[@id='" + this.getTableInputName + "']";
                    var elements = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                    var inputss = inputs;  // [0]["children"][1]["children"][0]["children"]
                    if (inputss && inputss.length > 0) {
                        Array.from(inputss).forEach(function (entry) {
                            if (entry.id == "table_field") {
                                entry["children"][1]["children"][0].childNodes.forEach(function (el) { // was missing a )
                                    el.childNodes.forEach(function (el1) {
                                        el1["classList"].remove('active');
                                    });
                                });
                            }
                        });
                        elements["classList"].add('active');
                    }
                    //}
                }
            }
            if (button != null && button != "") {
                var element = this.matchingElement["offsetParent"];
                if (element) {
                    Array.from(inputs).forEach(el => {
                        el.classList.remove('active');
                    });
                    element["classList"].add('active');
                }
                // var element3 = document.querySelector('#'+'list'+this.getInputName);
                // if (element3) {
                //   Array.from(inputs).forEach(el => {
                //     el.style.display='none'
                //   });
                //   element3.style.display='block';
                // }
                if ((button["nodeName"].toLowerCase() == 'input' && button["type"] == 'text' && button.id == 'InputText') || (button["nodeName"].toLowerCase() == 'textarea' && button.id == 'textArea')) {
                    this.showHideInput = true;
                }
                else if (button["nodeName"].toLowerCase() == 'select') {
                    this.showHideSelect = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'input' && button["type"] == 'radio')) {
                    this.showHideRadio = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'input' && button["type"] == 'checkbox' && (button["id"] == 'checkbox' || button["id"] == 'approvalChecklist'))) {//(button["name"].indexOf('Checkbox') != -1) && !(button["name"].indexOf('Approval_Checkbox') != -1)
                    this.showHideCheckbox = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'input' && button["type"] == 'checkbox' && button["id"] == 'check')) { //&& (button["name"].indexOf('Check_List') != -1) && !(button["name"].indexOf('Approval_Checkbox') != -1)
                    this.showHideCheckList = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'input' && button["type"] == 'number')) {
                    this.showHideNumber = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'input' && (button["type"] == 'email' || button["type"] == 'password' || button["type"] == 'search'))) {
                    this.showHideEmail = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'input' && (button["type"] == 'date'))) {
                    this.showHideDate = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'input' && (button["type"] == 'month' || button["type"] == 'time'))) {
                    this.showHideDateMonth = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'label' && ((button.id.indexOf("customFile") != -1) || (button.id.indexOf("upload_button_1") != -1)))) {
                    this.showHidefile = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'input') && ((button["type"] == 'file'))) {
                    this.showHidefile = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'label' && (button.id.indexOf('input_range') != -1))) {
                    this.showHideRange = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'input' && (button["type"] == 'range'))) {
                    this.showHideRange = true;
                }
                else if (button["nodeName"].toLowerCase() == 'input' && (button["type"] == 'button' || button["type"] == 'submit' || button["type"] == 'reset')) {
                    this.showHideButton = true;
                    this.approvalButton = false;
                    if (button.id == 'approvalButton') {
                        this.approvalButton = true;
                    }
                }
                else if ((button["nodeName"].toLowerCase() == 'label') && !(button["id"].indexOf('table') != -1) && button["textContent"] != "" && button["textContent"] != "Upload File") {   // "Upload File"
                    this.showHideHeading = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'label') && (button["id"].indexOf('table') != -1)) {
                    this.showHideTable = true;
                }
                else if ((button["id"].indexOf('heading_field') != -1) || (button["id"].indexOf('paragraph_field') != -1)) {
                    this.showHideHeading = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'a')) {
                    this.showHideDateMonth = true;
                }
                else if ((button["nodeName"].toLowerCase() == 'div') && (button.id == 'tableData' || button.id == 'headerData')) {
                    this.showHideTable = true;
                }
                else {
                    this.showHideSelect = false;
                    this.showHideInput = false;
                    this.showHideDate = false;
                    this.showHideHeading = false;
                    this.showHideNumber = false;
                    this.showHideButton = false;
                    this.showHideEmail = false;
                    this.showHideRadio = false;
                    this.showHideCheckList = false;
                    this.showHideCheckbox = false;
                    this.showHideDateMonth = false;
                    this.showHideRange = false;
                    this.showHidefile = false;
                    this.showHideTable = false;
                }
            }
            if (this.newObject["formData"] != undefined) {
                // setting common code for feild properties
                var jsonObject;
                // for table
                if (this.getTableInputName != undefined) {
                    if (this.getTableInputName.indexOf('Header') != -1 || (this.matchingElement && this.matchingElement.id == 'headerData')) {
                        if (this.newObject["formData"][this.tableName] != undefined && this.newObject["formData"][this.tableName]["field_properties"][0]["header"]) {
                            var headers = this.newObject["formData"][this.tableName]["field_properties"][0]["header"];
                            for (var i = 0; i < headers.length; i++) {
                                if (headers[i].header_text == this.getTableInputName || (headers[i].header_child.length)) {
                                    if (headers[i].header_text == this.getTableInputName) {
                                        if (data) {
                                            this.newObject["formData"][this.tableName]["field_properties"][0]["header"][i].header_text = data;
                                            this.labelText = data;
                                        }
                                    }
                                    else if (headers[i].header_child.length) {
                                        for (var Hchild = 0; Hchild < headers[i].header_child.length; Hchild++) {
                                            if (headers[i].header_child[Hchild].header_text == this.getTableInputName) {
                                                if (data) {
                                                    this.newObject["formData"][this.tableName]["field_properties"][0]["header"][i].header_child[Hchild].header_text = data;
                                                    this.labelText = data;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (this.getTableInputName.indexOf('Data') != -1 || (this.matchingElement && this.matchingElement.id == 'tableData')) {
                        if (this.newObject["formData"][this.tableName] != undefined && this.newObject["formData"][this.tableName]["field_properties"][0]["table_fields"]) {
                            var tableFields = this.newObject["formData"][this.tableName]["field_properties"][0]["table_fields"];
                            for (var i = 0; i < tableFields.length; i++) {
                                if (tableFields[i].td_data) {
                                    if (tableFields[i]["td_text"] == this.getTableInputName) {
                                        // for(const key in tableFields[i]["td_data"]){
                                        //     if(this.newObject["formData"][this.tableName]["field_properties"][0]["table_fields"][i]["td_data"][key].label.name == this.getInputName){
                                        //         jsonObject = tableFields[i]["td_data"][this.getTableInputName];
                                        //     }
                                        // }
                                        jsonObject = tableFields[i]["td_data"][this.getTableInputName];
                                    }
                                }
                            }
                        }
                    }
                }
                // for artisan
                else if (this.newObject["formData"][this.getInputArtisan] != undefined &&
                    this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"] != undefined &&
                    this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]) {
                    jsonObject = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]
                }
                // for remainning fields
                else {
                    jsonObject = this.newObject["formData"][this.getInputName];
                }
                // satrt getting fields properties
                if (jsonObject != undefined) {
                    if (jsonObject['tooltips']) {
                    }
                    if (jsonObject || jsonObject['label']) {
                        this.labelText = jsonObject['label'] == undefined ? jsonObject : jsonObject['label']["DisplayName"];
                    }
                    if (jsonObject['label']) {
                        this.Hidden = jsonObject['label']['hidden'];
                        this.labelColor = jsonObject['label']['css_attribute']['color'];
                        this.selectedValue7 = jsonObject['label']['css_attribute']['fontSize'];
                        this.selectedValue8 = jsonObject["label"]["css_attribute"]["headingSize"];
                    }
                    if (jsonObject["validation_properties"]) {
                        this.Maxlength = jsonObject['validation_properties']['Validators_maxLength'];
                        this.Minlength = jsonObject['validation_properties']['Validators_minLength'];
                        this.selectedValue4 = jsonObject['validation_properties']['RegExp'];
                        this.validationType = jsonObject['validation_properties']['type_validation'];
                        this.validationTypeOperator = jsonObject['validation_properties']['type_validation_operator'];
                        this.validationTypeText = jsonObject['validation_properties']['type_validation_text'];
                        this.minDate = jsonObject['validation_properties']['minDate'];
                        this.maxDate = jsonObject['validation_properties']['maxDate'];
                        this.defaultDate = jsonObject['validation_properties']['defaultDate'];
                        this.currentDate = jsonObject['validation_properties']['currentDate'];
                        this.defaultDateMax = jsonObject['validation_properties']['defaultDateMax'];
                        this.defaultDateMin = jsonObject['validation_properties']['defaultDateMin'];
                        this.fileSize = jsonObject['validation_properties']['fileSize'];
                        this.type_validation_parent = jsonObject['validation_properties']['type_validation_parent'];
                    }
                    if (jsonObject["field_properties"]) {
                        this.inputPlaceHolder = jsonObject["field_properties"][0]['placeholder'];
                        this.fieldType = jsonObject["field_properties"][0]['field_type'];
                        if (jsonObject["field_properties"][0]['css_attribute']) {
                            if (jsonObject["field_properties"][0]['css_attribute']['color'] || jsonObject["field_properties"][0]['css_attribute']['textSize']) {
                                this.selectedValue17 = jsonObject["field_properties"][0]['css_attribute']['textSize'];
                                this.labelColor = jsonObject["field_properties"][0]['css_attribute']['color'];
                            }
                        }
                    }
                    if (jsonObject["generic_properties"]) {
                        this.Required = jsonObject["generic_properties"][0]['required'];
                        this.Readonly = jsonObject["generic_properties"][0]['read_only'];
                        this.autogenerated = jsonObject["generic_properties"][0]['autogenerated'];
                        this.unique = jsonObject["generic_properties"][0]['unique'];
                    }
                    if (jsonObject["dependency_attributes"]) {
                        this.selectedValue1 = jsonObject['dependency_attributes']["bindingRelation"];
                        if (this.selectedValue1 == "" || this.selectedValue1 == null) {
                            this.selectedValue1 = undefined;
                        }
                        this.selectedValue = jsonObject['dependency_attributes']["db_table"];
                        if (this.selectedValue) {
                            this.showCurrentTableColumn(this.selectedValue);
                        }
                        if (this.selectedValue == "" || this.selectedValue == null) {
                            this.selectedValue = undefined;
                        }
                        this.bindingColumns = jsonObject['dependency_attributes']["binding_column"];
                        this.displayColumns = jsonObject['dependency_attributes']["display_column"];
                        this.selectedValue3 = jsonObject['dependency_attributes']["parent_field"];
                        this.selectedValue2 = jsonObject['dependency_attributes']["relation_type"];
                        if (this.selectedValue2 == "" || this.selectedValue2 == null) {
                            this.selectedValue2 = undefined;
                        }
                        if (this.selectedValue3 == "" || this.selectedValue3 == null) {
                            this.selectedValue3 = undefined;
                        }
                        if (this.staticSection = jsonObject['dependency_attributes']["depedency_on"] == 'static') {
                            this.staticSection = jsonObject['dependency_attributes']["depedency_on"] = true;
                        }
                        else {
                            this.staticSection = jsonObject['dependency_attributes']["depedency_on"] = false;
                        }
                        this.arrayForSelectOptionss = jsonObject['dependency_attributes']["options"];
                        this.arrayForSelectOptions = this.arrayForSelectOptionss
                    }
                    if (jsonObject["grid_system"]) {
                        this.setWidths = jsonObject["grid_system"][0]['width'];
                    }
                }
                else {
                    this.validationType = '';
                    this.validationTypeOperator = '';
                    this.validationTypeText = '';
                    this.Readonly = false;
                    this.Required = false;
                    this.autogenerated = false;
                    this.unique = false;
                    this.Hidden = false;
                    this.fileSize = '',
                        this.fieldType = '';
                    this.selectedValue17 = '';
                    if (!this.getTableInputName) {
                        this.labelText = '';
                    }
                    this.defaultDateMax = '';
                    this.defaultDateMin = '';
                    this.labelColor = '';
                    this.Maxlength = '';
                    this.Minlength = '';
                    this.setWidths = '';
                    this.veps = '';
                    this.minDate = '';
                    this.maxDate = '';
                    this.currentDate = '';
                    this.defaultDate = '';
                    this.inputPlaceHolder = '';
                    this.selectedValue2 = undefined;
                    this.bindingColumns = '';
                    this.displayColumns = '';
                    this.selectedValue1 = undefined;
                    this.selectedValue3 = undefined;
                    this.selectedValue4 = '';
                    this.selectedValue7 = '';
                    this.selectedValue = undefined;
                }
            }
            else {
                this.validationType = '';
                this.fileSize = '';
                this.validationTypeOperator = '';
                this.validationTypeText = '';
                this.Readonly = false;
                this.Required = false;
                this.Hidden = false;
                this.unique = false;
                this.Hidden = false;
                this.fieldType = '';
                this.selectedValue17 = '';
                this.defaultDateMax = '';
                this.defaultDateMin = '';
                if (!this.getTableInputName) {
                    this.labelText = '';
                }
                this.labelColor = '';
                this.Maxlength = '';
                this.Minlength = '';
                this.setWidths = '';
                this.minDate = '';
                this.maxDate = '';
                this.veps = '';
                this.inputPlaceHolder = '';
                this.currentDate = '';
                this.defaultDate = '';
                this.selectedValue2 = undefined;
                this.bindingColumns = '';
                this.displayColumns = '';
                this.selectedValue1 = undefined;
                this.selectedValue3 = undefined;
                this.selectedValue4 = '';
                this.selectedValue7 = '';
                this.selectedValue = undefined;
            }
        }
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2); // show json on page
    }
    // delete particular component
    deDelectInputFieldForBinding(data) {
        var xpath = "//*[text()='" + data + "']";
        var matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (matchingElement == null) {
            matchingElement = document.querySelector('[name="' + this.getInputName + '"]') ? document.querySelector('[name="' + this.getInputName + '"]') : document.querySelector('#' + this.getInputName);
        }
        var datas = matchingElement["offsetParent"].parentNode;
        let x = this.formData;
        for (var key in x) {
            if (this.getInputArtisan != undefined && this.getInputArtisan.indexOf("Collapsible_Group") != -1) {
                // remove artisan from json
                for (var i = 0; i < this.getInputArtisanArray.length; i++) {
                    if (this.formData[this.getInputArtisanArray[i]] != undefined) {
                        if (this.formData[this.getInputArtisanArray[i]]["field_properties"][0]["inputs_fields"] &&
                            !(Object.keys(this.formData[this.getInputArtisanArray[i]]["field_properties"][0]["inputs_fields"]).length === 0)) {
                            if (this.formData[this.getInputArtisanArray[i]]["field_properties"][0]["inputs_fields"][key]) {
                                delete this.formData[this.getInputArtisanArray[i]]["field_properties"][0]["inputs_fields"][key];
                            }
                        }
                        else {
                            delete this.formData[this.getInputArtisanArray[i]];
                        }
                    }
                }
            }
            else if (this.getTableInputName) {
                // remove json from table
                for (var i = 0; i < this.formData[key]["field_properties"][0]["table_fields"].length; i++) {
                    if (this.formData[key]["field_properties"][0]["table_fields"][i]["td_text"] == this.getTableInputName) {
                        delete this.formData[key]["field_properties"][0]["table_fields"][i]["td_data"][this.getTableInputName];
                        datas.parentNode.innerHTML = 'Data';
                    }
                }
            }
            else {
                if (key == data) {
                    // remove every component other than artisan and table from json 
                    delete this.formData[key];
                }
            }
        }
        datas.remove();
        document.getElementById('output2').textContent = JSON.stringify(this.newObject);
    }
    setfrequesncy(event: any) {
        if (event.value == "Single") {
            this.frequency = true;
        }
        else {
            this.frequency = false;
        }
    }
    // create dynamic options for select 
    setOptionsForSelect(data) {
        if (this.matchingElement == undefined || this.matchingElement == null || this.matchingElement == "") {
            var xpath = "//*[text()='" + this.getInputName + "']";
            this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        }
        const element = this.matchingElement;
        var button = "";
        function getText(offPer) {
            if (offPer.nodeName.toLowerCase() == 'input' || offPer.nodeName.toLowerCase() == 'textarea' || offPer.nodeName.toLowerCase() == 'select') {
                button = offPer;
            }
            else {
                for (let child of offPer.childNodes) {
                    getText(child)
                }
            }
        }
        getText(element["offsetParent"]);
        if (button != null && button["options"].length > 0) {
            for (var i = 0; i < button["options"].length; i++) {
                if (data.value != "" && !this.arrayForSelectOptions.includes(data.value)) {
                    this.arrayForSelectOptions.push(data.value);
                    if (this.getInputArtisan) {
                        if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                            const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"];
                            if (!this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].includes(data.value)) {
                                this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].push(data.value);
                            }
                        }
                    }
                    else if (this.newObject["formData"][this.getInputName]["dependency_attributes"]) {
                        if (!this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].includes(data.value)) {
                            this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].push(data.value);
                        }
                    }
                    const option = (new Option(data.value, data.value));
                    button["add"](option);
                    data.value = '';
                    // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
                }
                else {
                    data.value = '';
                }
            }
        }
        else {
            this.arrayForSelectOptions.push(data.value);
            if (this.getInputArtisan) {
                if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                    const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"];
                    if (!this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].includes(data.value)) {
                        this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].push(data.value);
                    }
                }
            }
            else if (this.newObject["formData"][this.getInputName]["dependency_attributes"]) {
                if (!this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].includes(data.value)) {
                    this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].push(data.value);
                }
            }
            const option = (new Option(data.value, data.value));
            button["add"](option);
            data.value = ''
            // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
    }
    // delete dynamic options for select
    deselectOptionsForSelect() {
        this.listbox = document.querySelector('#getnayar');
        const element = this.matchingElement;
        var button = "";
        function getText(offPer) {
            if (offPer.nodeName.toLowerCase() == 'input' || offPer.nodeName.toLowerCase() == 'textarea' || offPer.nodeName.toLowerCase() == 'select') {
                button = offPer;
            }
            else {
                for (let child of offPer.childNodes) {
                    getText(child)
                }
            }
        }
        getText(element["offsetParent"]);
        let selected = [];
        for (let i = 0; i < this.listbox.length; i++) {
            selected[i] = this.listbox[i].selected;
        }
        let index = button["options"].length;
        while (index--) {
            var f;
            if (selected[index]) {
                if (this.getInputArtisan) {
                    f = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"];
                }
                else {
                    f = this.formData[this.getInputName]["dependency_attributes"]["options"];
                }
                f.splice(f.indexOf(f[index]), 1);
                // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
                // for (var key in x) {
                //   if (x[key] == button["options"][index]["value"]) {
                //     delete this.formData[this.getInputName]["dependency_attributes"]["options"][index];
                //     // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
                //   }
                // }
                this.listbox["options"][index].remove(this.listbox["options"][index]);
                this.arrayForSelectOptions.splice(this.arrayForSelectOptions.indexOf(button["options"][index]["value"]), 1);
                button["options"][index].remove(button["options"][index]);
            }
        }
        // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // create dynamic options for radio/checklist
    setOptionsForRadioCheckbox(data) {
        if (this.matchingElement == undefined || this.matchingElement == null || this.matchingElement == "") {
            var xpath = "//*[text()='" + this.getInputName + "']";
            this.matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        }
        const element = this.matchingElement;
        var button = '';
        function getText(offPer) {
            if (offPer.nodeName.toLowerCase() == 'ul') {
                button = offPer;
            }
            else {
                for (let child of offPer.childNodes) {
                    getText(child)
                }
            }
        }
        getText(element["offsetParent"]);
        var li = document.createElement('li');
        var label = document.createElement('label');
        var input = document.createElement('input');
        if (data.id == 'radio') {
            if (!this.arrayForSelectOptions.includes('Radio')) {
                this.arrayForSelectOptions.push('Radio');
                if (this.getInputArtisan) {
                    if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                        const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"];
                        if (!this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].includes('Radio')) {
                            this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].push('Radio');
                        }
                    }
                }
                else if (this.newObject["formData"][this.getInputName]["dependency_attributes"]) {
                    if (!this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].includes('Radio')) {
                        this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].push('Radio');
                    }
                }
                document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
        }
        else if (data.id == 'checklist') {
            if (!this.arrayForSelectOptions.includes('checkbox')) {
                this.arrayForSelectOptions.push('checkbox');
                if (this.getInputArtisan) {
                    if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                        const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"];
                        if (!this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].includes('checkbox')) {
                            this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].push('checkbox');
                        }
                    }
                }
                else if (this.newObject["formData"][this.getInputName]["dependency_attributes"]) {
                    if (!this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].includes('checkbox')) {
                        this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].push('checkbox');
                    }
                }
                document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
        }

        if (button != null && button["children"].length > 0) {
            for (var i = 0; i < button["children"].length; i++) {
                if (data.value != "" && !this.arrayForSelectOptions.includes(data.value)) {
                    this.arrayForSelectOptions.push(data.value);
                    if (this.getInputArtisan) {
                        if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                            const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"];
                            if (!this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].includes(data.value)) {
                                this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"].push(data.value);
                            }
                        }
                    }
                    else if (this.newObject["formData"][this.getInputName]["dependency_attributes"]) {
                        if (!this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].includes(data.value)) {
                            this.newObject["formData"][this.getInputName]["dependency_attributes"]["options"].push(data.value);
                        }
                    }
                    document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
                    button["appendChild"](li);
                    li.appendChild(label);
                    li.appendChild(input);
                    label.innerText = data.value;
                    input.name = data.value;
                    input.classList.add('form-control');
                    if (data.id == 'radio') {
                        input.type = 'radio';
                        input.name = 'Radio_List_1';
                    }
                    else if (data.id == 'checklist') {
                        input.id = 'check';
                        input.type = 'checkbox';
                    }
                    else if (data.id == 'checkbox') {
                        input.type = 'checkbox';
                    }
                    input.checked;
                    data.value = '';
                }
                else {
                    data.value = '';
                }
            }
        }
    }
    // delete dynamic options for radio/checklist
    deselectOptionsForRadioCheckbox(data) {
        if (data.id == 'radio') {
            this.radiolistbox = document.querySelector('#getnayars');
        }
        else if (data.id == 'checkbox') {
            this.radiolistbox = document.querySelector('#getnayarss');
        }
        const element = this.matchingElement;
        var button = "";
        function getText(offPer) {
            if (offPer.nodeName.toLowerCase() == 'ul') {
                button = offPer;
            }
            else {
                for (let child of offPer.childNodes) {
                    getText(child)
                }
            }
        }
        getText(element["offsetParent"]);
        let selected = [];
        for (let i = 0; i < this.radiolistbox.length; i++) {
            selected[i] = this.radiolistbox[i].selected;
        }
        let index = button["children"].length;
        while (index--) {
            if (selected[index]) {
                var f;
                if (this.getInputArtisan) {
                    f = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["dependency_attributes"]["options"];
                }
                else {
                    f = this.formData[this.getInputName]["dependency_attributes"]["options"];
                }
                f.splice(f.indexOf(f[index]), 1);
                function getText(offPer) {
                    if (offPer.nodeName.toLowerCase() == 'ul') {
                        offPer["children"][index].remove(offPer["children"][index]);
                    }
                    else {
                        for (let child of offPer.childNodes) {
                            getText(child)
                        }
                    }
                }
                getText(button["offsetParent"]);
                this.radiolistbox["options"][index].remove(this.radiolistbox["options"][index]);
            }
        }
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    // code for setting date for fields like (date/month/year) start
    // setMinDate(data){
    //   this.minDate=data.value;
    //   if(this.maxDate != null && this.maxDate != ""){
    //     if (formatDate(this.maxDate,'yyyy-MM-dd','en_US') < formatDate(this.minDate,'yyyy-MM-dd','en_US')){
    //       alert('min date cannot be greater than max date');
    //       //data.value='';
    //     }
    //     else{
    //       if(this.newObject["formData"][this.getInputName]["validation_properties"]){
    //         this.newObject["formData"][this.getInputName]["validation_properties"]["minDate"] = data.value;
    //       }
    //       // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    //     }
    //   }
    //   else{
    //     if(this.newObject["formData"][this.getInputName]["validation_properties"]){
    //       this.newObject["formData"][this.getInputName]["validation_properties"]["minDate"] = data.value;
    //     }
    //     // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    //   }
    // }
    setMinDate(data) {
        if (data.id == 'monthMin') {
            this.minDate = data.value;
            if (this.getInputArtisan) {
                if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                    const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                    product["minDate"] = this.minDate;
                }
            }
            else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
                this.newObject["formData"][this.getInputName]["validation_properties"]["minDate"] = this.minDate;
            }
            // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
        else {
            this.defaultDateMin = data.checked;
            if (data.checked) {
                this.minDate = formatDate(new Date(), 'yyyy-MM-dd', 'en_US');
                if (this.getInputArtisan) {
                    if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                        const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                        product["defaultDateMin"] = this.defaultDateMin;
                        product["minDate"] = this.minDate;
                    }
                }
                else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
                    this.newObject["formData"][this.getInputName]["validation_properties"]["defaultDateMin"] = this.defaultDateMin;
                    this.newObject["formData"][this.getInputName]["validation_properties"]["minDate"] = this.minDate;
                }
                // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
            else {
                if (this.getInputArtisan) {
                    if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                        const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                        product["defaultDateMin"] = false;
                        product["minDate"] = this.minDate;
                    }
                }
                else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
                    this.newObject["formData"][this.getInputName]["validation_properties"]["defaultDateMin"] = false;
                }
                // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
        }
    }
    // setMaxDate(data){
    //   this.maxDate=data.value;
    //   if(this.minDate != null && this.minDate != ""){
    //     if (formatDate(this.maxDate,'yyyy-MM-dd','en_US') < formatDate(this.minDate,'yyyy-MM-dd','en_US')){
    //       alert('max date cannot be less than min date');
    //       //data.value='';
    //     }
    //     else{
    //       if(this.newObject["formData"][this.getInputName]["validation_properties"]){
    //         this.newObject["formData"][this.getInputName]["validation_properties"]["maxDate"] = data.value;
    //       }
    //       // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    //     }
    //   }
    //   else{
    //     if(this.newObject["formData"][this.getInputName]["validation_properties"]){
    //       this.newObject["formData"][this.getInputName]["validation_properties"]["maxDate"] = data.value;
    //     }
    //     // document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    //   }
    // }
    setMaxDate(data) {
        if (data.id == 'monthyearMax') {
            this.maxDate = data.value;
            if (this.getInputArtisan) {
                if (this.getInputArtisan) {
                    if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                        const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                        product["maxDate"] = this.maxDate;
                    }
                }
                else if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                    const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                    product["maxDate"] = this.maxDate;
                }
            }
            else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
                this.newObject["formData"][this.getInputName]["validation_properties"]["maxDate"] = this.maxDate;
            }
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
        else {
            this.defaultDateMax = data.checked;
            if (data.checked) {
                this.maxDate = formatDate(new Date(), 'yyyy-MM-dd', 'en_US');
                if (this.getInputArtisan) {
                    if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                        const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                        product["defaultDateMax"] = this.defaultDateMax;
                        product["maxDate"] = this.maxDate;
                    }
                }
                else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
                    this.newObject["formData"][this.getInputName]["validation_properties"]["defaultDateMax"] = this.defaultDateMax;
                    this.newObject["formData"][this.getInputName]["validation_properties"]["maxDate"] = this.maxDate;
                }
                document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
            else {
                if (this.getInputArtisan) {
                    if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                        const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                        product["defaultDateMax"] = false;
                    }
                }
                else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
                    this.newObject["formData"][this.getInputName]["validation_properties"]["defaultDateMax"] = false;
                }
                document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
        }
    }
    setDefaultDate(data) {
        if (data.id == 'defaultYearmonth') {
            this.currentDate = data.value;
            if (this.getInputArtisan) {
                if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                    const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                    product["currentDate"] = this.currentDate;
                }
            }
            else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
                this.newObject["formData"][this.getInputName]["validation_properties"]["currentDate"] = this.currentDate;
            }
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
        else {
            this.defaultDate = data.checked;
            if (data.checked) {
                this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en_US');
                if (this.getInputArtisan) {
                    if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                        const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                        product["defaultDate"] = this.defaultDate;
                        product["currentDate"] = this.currentDate;
                    }
                }
                else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
                    this.newObject["formData"][this.getInputName]["validation_properties"]["defaultDate"] = this.defaultDate;
                    this.newObject["formData"][this.getInputName]["validation_properties"]["currentDate"] = this.currentDate;
                }
                document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
            else {
                if (this.getInputArtisan) {
                    if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["field_properties"]) {
                        const product = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]["validation_properties"];
                        product["defaultDate"] = false;
                    }
                }
                else if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
                    this.newObject["formData"][this.getInputName]["validation_properties"]["defaultDate"] = false;
                }
                document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
        }
    }
    // code for table start
    setTableChildren(data) {
        var xpath1 = "//th[@id='" + this.getTableInputName + "']";
        this.matchingElementNew = document.evaluate(xpath1, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        var unique = this.tableDataCount;
        var arr = [];
        var arrNew = [];
        function getText(offPer, element, name, tableName) {
            if (offPer.nodeName.toLowerCase() == 'tbody') {
                var tr = offPer.getElementsByTagName("tr");
                var insertAfters = 0;
                for (var g = 0; g < tr[0].children.length; g++) {
                    if (tr[0].children[g].id == name) {
                        insertAfters = g + 1;
                    }
                }
                if (data < element.colSpan) {
                    element.colSpan = data;
                    element.removeAttribute("colSpan");
                    //offPer.parentNode.deleteRow(1);
                    tr[1].deleteCell(1);
                    tr[1].deleteCell(0);
                    for (var m = 0; m < tr[0].children.length; m++) {
                        if (tr[0].children[m].id != name) {
                            if (tr[0].children[m].colSpan < 2) {
                                tr[0].children[m].removeAttribute("rowSpan");
                            }
                        }
                        else if (tr[0].children[m].rowSpan > 1 && tr[0].children[m].rowSpan > 1) {
                            tr[0].children[m].removeAttribute("rowSpan");
                        }
                    }
                }
                else {
                    element.colSpan = data;
                    for (var m = 0; m < tr[0].children.length; m++) {
                        if (tr[0].children[m].id != name) {
                            if (tr[0].children[m].colSpan < 2) {
                                tr[0].children[m].rowSpan = '2';
                            }
                        }
                        else if (tr[0].children[m].rowSpan > 1 && tr[0].children[m].rowSpan > 1) {
                            tr[0].children[m].rowSpan = 1;
                        }
                    }
                    element.style.textAlign = "center";
                    var newTableHeading = document.createElement('tr');
                    for (var k = 0; k < data; k++) {
                        var trs = document.createElement('th');
                        trs.id = 'Header' + unique;
                        trs.classList.add('shubham1');
                        trs.innerText = 'Heading';
                        newTableHeading.appendChild(trs);
                        arrNew.push(trs);
                        unique += 1;
                    }
                    //offPer.children[i].appendChild(newTableHeading).after(tr[0]);
                    if (tr[1].children[0].nodeName.indexOf('TH') != -1) {
                        for (var f = 0; f < newTableHeading.children.length; f++) {
                            var clone = newTableHeading.children[f].cloneNode(true);
                            tr[1].appendChild(clone);
                        }
                    }
                    else {
                        $(newTableHeading).insertAfter(tr[0]);
                    }
                    var x = 0;
                    if (tr[1].children[0].nodeName.indexOf('TH') != -1) {
                        x = 2;
                    }
                    else {
                        x = 1;
                    }
                    for (var i = x; i < tr.length; i++) {
                        for (var j = 0; j < data - 1; j++) {
                            var newHeadng = document.createElement('td');
                            newHeadng.id = 'Data' + unique;
                            newHeadng.classList.add('shubham1');
                            newHeadng.innerText = 'Data';
                            arr.push(newHeadng);
                            var clones = newHeadng.cloneNode(true);
                            tr[i].insertBefore(newHeadng, tr[i].children[insertAfters]);
                            unique += 1;
                        }
                    }
                }
            }
            else {
                for (let child of offPer.childNodes) {
                    getText(child, element, name, tableName)
                }
            }
        }
        getText(this.matchingElementNew["offsetParent"], this.matchingElementNew, this.getTableInputName, this.tableName);
        if (this.tableDataCount >= 0) {
            this.tableDataCount = (unique);
        }
        else {
            this.tableDataCount += (unique);
        }
        for (var f = 0; f < arr.length; f++) {
            //element24[f]["onclick"] = this.selectInputFieldForBinding("Header_0");
            arr[f].addEventListener("click", (event: Event) => {
                this.selectInputFieldForBinding(event.target["id"]);
            });
            if (this.formData[this.getInputName]["field_properties"] && arr[f].id.indexOf('Data') != -1) {
                this.formData[this.getInputName]["field_properties"][0]["table_fields"].push({ td_type: '', td_text: arr[f].id, td_data: new Array() });
            }
        }
        for (var f = 0; f < arrNew.length; f++) {
            //element24[f]["onclick"] = this.selectInputFieldForBinding("Header_0");
            arrNew[f].addEventListener("click", (event: Event) => {
                this.selectInputFieldForBinding(event.target["id"]);
            });

            if (this.formData[this.getInputName]["field_properties"] && arrNew[f].id.indexOf('Header') != -1) {
                for (var match = 0; match < this.formData[this.getInputName]["field_properties"][0]["header"].length; match++) {
                    if (this.formData[this.getInputName]["field_properties"][0]["header"][match].header_text == this.getTableInputName) {
                        this.formData[this.getInputName]["field_properties"][0]["header"][match]["header_child"].push({ header_text: arrNew[f].id, header_child: new Array() });
                    }
                }
            }
        }

        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    setRowsColumns(data) {
        var xpath1 = "//*[text()='" + this.getInputName + "']";
        this.matchingElementNew = document.evaluate(xpath1, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        var unique = this.tableDataCount;
        if (data.id == 'rows') {
            if (this.formData[this.getInputName]["field_properties"]) {
                this.formData[this.getInputName]["field_properties"][0]["no_rows"] += parseInt(data.value);
            }
            var arr = [];
            function getText(offPer, tableName, tableDataCount) {
                if (offPer.nodeName.toLowerCase() == 'tbody') {
                    var tr = offPer.getElementsByTagName("tr");
                    var lengths = tr[((tr.length) - 1)].children.length;
                    // set table heading 
                    for (var k = 0; k < data.value; k++) {
                        var trNew = document.createElement('tr');
                        for (var l = 0; l < lengths; l++) {

                            var newHeadng = document.createElement('td');
                            newHeadng.id = 'Data' + unique;// + tableName;
                            newHeadng.classList.add('shubham1');
                            newHeadng.innerText = 'Data';
                            arr.push(newHeadng);
                            trNew.appendChild(newHeadng);
                            unique += 1;
                        }
                        offPer.appendChild(trNew)
                    }
                }
                else {
                    for (let child of offPer.childNodes) {
                        getText(child, tableName, tableDataCount)
                    }
                }
            }
            getText(this.matchingElementNew["offsetParent"], this.tableName, this.tableDataCount);
            if (this.tableDataCount >= 0) {
                this.tableDataCount = (unique);
            }
            else {
                this.tableDataCount += (unique);
            }
            for (var f = 0; f < arr.length; f++) {
                //element24[f]["onclick"] = this.selectInputFieldForBinding("Header_0");
                arr[f].addEventListener("click", (event: Event) => {
                    this.selectInputFieldForBinding(event.target["id"]);
                });

                if (this.formData[this.getInputName]["field_properties"] && arr[f].id.indexOf('Data') != -1) {
                    this.formData[this.getInputName]["field_properties"][0]["table_fields"].push({ td_type: '', td_text: arr[f].id, td_data: new Array() });
                }
            }
            document.getElementById('output2').textContent = JSON.stringify(this.newObject);
        }
        else if (data.id == 'columns') {
            if (this.formData[this.getInputName]["field_properties"]) {
                this.formData[this.getInputName]["field_properties"][0]["no_column"] += parseInt(data.value);
            }
            var arr = [];
            function getText(offPer, tableName) {
                if (offPer.nodeName.toLowerCase() == 'tbody') {
                    var tr = offPer.getElementsByTagName("tr");
                    var flag = false;
                    // get information about colspan or rowspan of previous table heading tag whether any rowspan or not
                    for (var i = 0; i < tr.length; i++) {
                        if (tr[1].children[i] != undefined && tr[1].children[i].rowSpan > 1) {
                            flag = true;
                        }
                    }
                    // set table heaings 0,1,2 etc first(heading)
                    for (var k = 0; k < data.value; k++) {
                        var newHeadng = document.createElement('th');//firsttableHeadLastChild.cloneNode(true);
                        if (flag) {
                            newHeadng.rowSpan = 2
                        }
                        newHeadng.id = 'Header' + unique;
                        newHeadng.classList.add('shubham1');
                        newHeadng.innerText = 'Heading'
                        // var div = document.createElement('div');
                        // div.innerText = 'Heading';
                        // div.id = 'headerData';
                        // var span = document.createElement('span');
                        // span.classList.add('edit', 'trans', 'shubham');
                        // var iTag = document.createElement('i');
                        // iTag.classList.add("fa", "fa-pencil");
                        // iTag.id = newHeadng.id;
                        // span.appendChild(iTag);
                        // newHeadng.appendChild(div);
                        // newHeadng.appendChild(span);
                        arr.push(newHeadng);
                        tr[0].appendChild(newHeadng);
                        unique += 1;
                    }
                    // set table data 
                    // if previously added any child to any heading second(subheader)
                    if (tr[1].children[0].nodeName.indexOf('TH') != -1) {
                        for (var i = 2; i < tr.length; i++) {
                            for (var j = 0; j < data.value; j++) {
                                var newHeadng = document.createElement('td');//firsttableHeadLastChild.cloneNode(true);
                                newHeadng.id = 'Data' + unique;
                                newHeadng.classList.add('shubham1');
                                newHeadng.innerText = 'Data';
                                // var div = document.createElement('div');
                                // div.innerText = 'Data';
                                // div.id = 'tableData';
                                // var span = document.createElement('span');
                                // span.classList.add('edit', 'trans', 'shubham');
                                // var iTag = document.createElement('i');
                                // iTag.classList.add("fa", "fa-pencil");
                                // iTag.id = newHeadng.id;
                                // span.appendChild(iTag);
                                // newHeadng.appendChild(div);
                                // newHeadng.appendChild(span);
                                arr.push(newHeadng);
                                tr[i].appendChild(newHeadng);
                                unique += 1;
                            }
                        }
                    }
                    // if previously not added any child to any heading third(data)
                    else {
                        for (var i = 1; i < tr.length; i++) {
                            for (var j = 0; j < data.value; j++) {
                                var newHeadng = document.createElement('td');//firsttableHeadLastChild.cloneNode(true);
                                // var child1 = parseInt((tr[i].children[(tr[i].children.length)-1].id.replace(/[^0-9]/g, '')));
                                // var child2 = parseInt((tr[i].children[(tr[i].children.length)-2].id.replace(/[^0-9]/g, '')));
                                // var differ = (child1 - child2);
                                // var unique = parseInt(tr[i].children[(tr[i].children.length)-1].id.replace(/[^0-9]/g, '')) + differ; 
                                newHeadng.id = 'Data' + unique;// + tableName;
                                newHeadng.classList.add('shubham1');
                                newHeadng.innerText = 'Data';
                                // var div = document.createElement('div');
                                // div.innerText = 'Data';
                                // div.id='tableData';
                                // var span = document.createElement('span');
                                // span.classList.add('edit', 'trans', 'shubham');
                                // var iTag = document.createElement('i');
                                // iTag.classList.add("fa", "fa-pencil");
                                // iTag.id = newHeadng.id;
                                // span.appendChild(iTag);
                                // newHeadng.appendChild(div);
                                // newHeadng.appendChild(span);
                                arr.push(newHeadng);
                                tr[i].appendChild(newHeadng);
                                unique += 1;
                            }
                        }
                    }
                }
                else {
                    for (let child of offPer.childNodes) {
                        getText(child, tableName)
                    }
                }
            }
            getText(this.matchingElementNew["offsetParent"], this.tableName);
            if (this.tableDataCount >= 0) {
                this.tableDataCount = (unique);
            }
            else {
                this.tableDataCount += (unique);
            }
            for (var f = 0; f < arr.length; f++) {
                //element24[f]["onclick"] = this.selectInputFieldForBinding("Header_0");
                arr[f].addEventListener("click", (event: Event) => {
                    this.selectInputFieldForBinding(event.target["id"]);
                });
                if (this.formData[this.getInputName]["field_properties"] && arr[f].id.indexOf('Header') != -1) {
                    this.formData[this.getInputName]["field_properties"][0]["header"].push({ header_text: arr[f].id, header_child: new Array() });
                }
                if (this.formData[this.getInputName]["field_properties"] && arr[f].id.indexOf('Data') != -1) {
                    this.formData[this.getInputName]["field_properties"][0]["table_fields"].push({ td_type: '', td_text: arr[f].id, td_data: new Array() });
                }
            }
            document.getElementById('output2').textContent = JSON.stringify(this.newObject);
        }
    }
    // setting json for some component(required,minlength,autogenerated etc) (optimised code)
    setCommonJson(value, property, propertyValue) {
        var jsonObject;
        // for table
        // for remainning field
        if (this.newObject["formData"][this.getInputName] != undefined) {
            jsonObject = this.newObject["formData"][this.getInputName];
            for (var key in jsonObject) {
                if (key == property) {
                    if (key == "label" || key == "validation_properties" || key == "dependency_attributes") {
                        if (propertyValue == 'css_attribute') {
                            this.setCssAttribute(value, jsonObject, property, propertyValue);
                        }
                        else if (property == 'dependency_attributes') {
                            this.setDependencyAttribute(value, jsonObject, property, propertyValue);
                        }
                        else {
                            jsonObject[property][propertyValue] = value;
                        }
                    }
                    else {
                        jsonObject[property][0][propertyValue] = value;
                    }
                }
            }
        }
        // for table
        else if (this.getTableInputName != undefined) {
            if (this.getTableInputName.indexOf('Header') != -1) {
                if (this.newObject["formData"][this.tableName] != undefined && this.newObject["formData"][this.tableName]["field_properties"][0]["header"]) {
                    var headers = this.newObject["formData"][this.tableName]["field_properties"][0]["header"];
                    for (var i = 0; i < headers.length; i++) {
                        if (headers[i].header_text == this.getTableInputName) {
                            jsonObject = this.newObject["formData"][this.tableName]["field_properties"][0]["header"][i].header_text;
                        }
                    }
                }
            }
            else if (this.getTableInputName.indexOf('Data') != -1) {
                if (this.newObject["formData"][this.tableName] != undefined && this.newObject["formData"][this.tableName]["field_properties"][0]["table_fields"]) {
                    var tableFields = this.newObject["formData"][this.tableName]["field_properties"][0]["table_fields"];
                    for (var i = 0; i < tableFields.length; i++) {
                        if (tableFields[i].td_text == this.getTableInputName) {
                            jsonObject = this.newObject["formData"][this.tableName]["field_properties"][0]["table_fields"][i]["td_data"][this.getTableInputName];
                            for (var key in jsonObject) {
                                if (key == property) {
                                    if (key == "label" || key == "validation_properties" || key == "dependency_attributes") {
                                        if (propertyValue == 'css_attribute') {
                                            this.setCssAttribute(value, jsonObject, property, propertyValue);
                                        }
                                        else if (property == 'dependency_attributes') {
                                            this.setDependencyAttribute(value, jsonObject, property, propertyValue);
                                        }
                                        else {
                                            jsonObject[property][propertyValue] = value;
                                        }
                                    }
                                    else {
                                        jsonObject[property][0][propertyValue] = value;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        // for artisan
        else if (this.newObject["formData"][this.getInputArtisan]) {
            if (this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]) {
                jsonObject = this.newObject["formData"][this.getInputArtisan]["field_properties"][0]["inputs_fields"][this.getInputName]
                for (var key in jsonObject) {
                    if (key == property) {
                        if (key == "label" || key == "validation_properties" || key == "dependency_attributes") {
                            if (propertyValue == 'css_attribute') {
                                this.setCssAttribute(value, jsonObject, property, propertyValue);
                            }
                            else if (property == 'dependency_attributes') {
                                this.setDependencyAttribute(value, jsonObject, property, propertyValue);
                            }
                            else {
                                jsonObject[property][propertyValue] = value;
                            }
                        }
                        else {
                            jsonObject[property][0][propertyValue] = value;
                        }
                    }
                }
            }
        }
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
    }
    setDependencyAttribute(value: any, jsonObject: any, property: any, propertyValue: any) {
        jsonObject[property][propertyValue] = value;
        if (propertyValue == 'display_column' || propertyValue == 'filter_column' || propertyValue == 'binding_column') {
            jsonObject[property]['dependent'] = true;
            if (jsonObject[property]['filter_column'] == undefined) {
                jsonObject[property]['filter_column'] = '';
            }
            jsonObject[property]['fetch_columns'] = jsonObject[property]['display_column'] + ',' + jsonObject[property]['filter_column'] + ',' + jsonObject[property]['binding_column'];
        }
        else if (propertyValue == 'relation_type') {
            if (value == 'Dependent') {
                jsonObject[property]['dependent'] = true;
            }
            else {
                jsonObject[property]['dependent'] = false;
            }
        }
        else if (propertyValue == 'parent_field' && this.selectedValue2 == 'Autofill') {
            this.selectedValue = this.newObject["formData"][this.selectedValue3]["dependency_attributes"]["db_table"];
            this.bindingColumns = this.newObject["formData"][this.selectedValue3]["dependency_attributes"]["binding_column"];
            this.displayColumns = this.newObject["formData"][this.selectedValue3]["dependency_attributes"]["display_column"];
            jsonObject[property]['db_table'] = this.selectedValue;
            jsonObject[property]['binding_column'] = this.bindingColumns;
            jsonObject[property]['display_column'] = this.displayColumns;
        }
    }
    // set label color and font size
    setCssAttribute(value: any, jsonObject: any, property: any, propertyValue: any) {
        if (value.indexOf('#') != -1) {
            jsonObject[property][propertyValue]['color'] = value;
        }
        else {
            jsonObject[property][propertyValue]['fontSize'] = value;
        }
    }
    // shifting component up and down in json for artisan(only for artisan)
    setJson(event: any, draggable: any) {
        let x = this.formData;
        var temp;
        // to successfully drop element to any artisan
        var target = event.target.firstChild.parentNode.parentNode.id;
        for (var i = 0; i < this.getInputArtisanArray.length; i++) {
            if (target == this.getInputArtisanArray[i]) {
                this.getInputArtisan = this.getInputArtisanArray[i]
            }
        }
        // to succeesfully drop any element to artisan
        var element = "";
        function getText(offPer, drag) { // recursion function
            if (drag.innerText != undefined && drag.innerText == offPer) {
                element = offPer;
            }
            if (drag.id != undefined && drag.id == offPer) {
                element = offPer;
            }
            else {
                for (let child of drag.childNodes) {
                    getText(offPer, child)
                }
            }
        }
        for (var keys in this.testObject1) {
            getText(this.testObject1[keys], draggable[0]); // get edit button on which previous event listener present
        }
        // finally shifting json object up and down in formData
        for (var key in x) {
            if (key == element) {
                if (!(this.artisanArray.includes(element))) {
                    if (!(typeof this.formData[this.getInputArtisan]["field_properties"][0]["inputs_fields"] != "undefined")) {
                        this.formData[this.getInputArtisan]["field_properties"][0]["inputs_fields"] = new Object();
                    }
                    this.artisanArray.push(element); // make sure loop not enter twice (condition need to improve in future)
                    // swap json start
                    temp = this.formData[key];
                    this.formData[key] = this.formData[this.getInputArtisan]["field_properties"][0]["inputs_fields"][element];
                    this.formData[this.getInputArtisan]["field_properties"][0]["inputs_fields"][element] = temp;
                    // swap json end
                }
            }
        }
        document.getElementById('output2').textContent = JSON.stringify(this.newObject);
    }
    // code for edit form having ID
    showFieldEdit(event, label) {
        const element: HTMLDivElement = this.renderer.createElement('div');
        for (let value of Object.values(this.fieldhtml)) {
            // console.log(value[event]);
            // this.htmlcode = this.sanitized.bypassSecurityTrustHtml(value[event]);
            //this.renderer.appendChild(this.div.nativeElement, this.htmlcode)
            element.innerHTML = value[event];
            // adding necessary classes to component
            element.classList.add('draggable', 'width100');

            // making component active by passing 'active' class
            const container1 = document.getElementById('dropzone');
            const inputs = container1.getElementsByClassName('form-group');
            for (var f = 0; f < inputs.length; f++) {
                inputs[f].classList.remove('active');
            }
            if (event == 'table_field') {
                element.children[0]["children"][1]["children"][0]["children"][0]["children"][0].classList.add('active');
            }
            else {
                element.children[0].classList.add('active');
            }
            // for options fields
            // if(event == 'select_field'){
            //     alert('optins')
            //    var options = this.newObject['formData'][label].dependency_attributes.options;
            //    for(var i = 0; i < options.length; i++){
            //     const element: HTMLDivElement = this.renderer.createElement('li');
            //     element[i].innerHTML = options[i];
            //    }
            // }


            // making component draggable
            $(function () {
                $(".draggable").draggable({
                    scroll: 'true',
                    refreshPositions: true,
                    opacity: 1,
                    snapMode: "inner",
                    containment: ".sortable",
                    connectToSortable: ".sortable",
                    //  helper: 'clone',
                    drag: function (event, ui) {
                        // Keep the left edge of the element
                        // at least 100 pixels from the container
                        // ui.position.left = Math.min( 100, ui.position.left );
                    }
                    //iframeFix: true
                });
                $(".sortable").sortable({
                    helper: "ui-resizable-helper",
                    sort: true,
                    scroll: true,
                    animation: 100,
                    draggable: '.list-group-item',
                });
                //            $(".resizable").resizable({
                //                helper: "ui-resizable-helper",
                //            });
                $(".droppable").droppable({
                    drop: function (event, ui) {
                        $(this)
                            .addClass("ui-state-highlight")

                    }
                });
            });
            // make html for edit component
            console.log(this.newObject)
            if (event == 'table_field') {
                var header = this.newObject["formData"][label].field_properties[0].header;
                var data = this.newObject["formData"][label].field_properties[0].table_fields;
                const doc = element.getElementsByClassName("tableCss");
                doc[0].innerHTML = "";
                doc[0].classList.add("table", "tableCss");
                var tbody = document.createElement('tbody');
                var tr = document.createElement('tr');
                var newTableHeading = document.createElement('tr');
                var flag = false;
                for (var key in header) {
                    var th = document.createElement('th');
                    th.id = header[key].header_text;
                    var text1 = document.createTextNode(header[key].header_text);
                    th.appendChild(text1);
                    th.style.textAlign = "center";
                    tr.appendChild(th);
                    if (header[key].header_child.length > 0) {
                        th.colSpan = header[key].header_child.length;
                        if (header[key].header_child.length > 1) {
                            flag = true;
                            for (var k = 0; k < header[key].header_child.length; k++) {
                                var trs = document.createElement('th');
                                trs.id = header[key].header_child.header_text;
                                trs.classList.add('shubham1');
                                trs.innerText = 'Heading';
                                newTableHeading.appendChild(trs);
                            }
                        }
                        else {
                            th.rowSpan = 2;
                        }
                    }
                }
                tbody.appendChild(tr);
                if (flag) {
                    tbody.appendChild(newTableHeading);
                }
                var rows = this.newObject["formData"][label].field_properties[0].no_rows - 1;
                var columns = this.newObject["formData"][label].field_properties[0].no_column;
                var tr1; var l = 0; var fieldType;
                for (var k = 0; k < rows; k++) {
                    tr1 = document.createElement('tr');
                    for (var j = 0; j < columns; j++) {
                        var td = document.createElement('td');
                        td.id = this.newObject["formData"][label].field_properties[0].table_fields[l].td_text;
                        if (this.newObject["formData"][label].field_properties[0].table_fields[l].td_data[0] != undefined) {
                            const elementAppend: HTMLDivElement = this.renderer.createElement('div');
                            for (let value of Object.values(this.fieldhtml)) {
                                fieldType = this.newObject["formData"][label].field_properties[0].table_fields[l].td_data[0].field_properties[0].field_type;
                                elementAppend.innerHTML = value[this.mapforComponent[fieldType]];

                                td.appendChild(elementAppend);
                            }
                        }
                        else {
                            td.appendChild(document.createTextNode("Data"));
                        }
                        tr1.appendChild(td);
                        l += 1;
                    }
                    tbody.appendChild(tr1);
                }
                if (flag) {
                    var x = 0;
                    var tr2 = tbody.getElementsByTagName("tr");
                    if (tr2[1].children[0].nodeName.indexOf('TH') != -1) {
                        x = 2;
                    }
                    else {
                        x = 1;
                    }
                    for (var p = x; p < tr2.length; p++) {
                        for (var j = 0; j < 1; j++) {
                            var newHeadng = document.createElement('td');
                            newHeadng.id = 'Data';
                            newHeadng.classList.add('shubham1');
                            newHeadng.innerText = 'Data';
                            var clones = newHeadng.cloneNode(true);
                            tr2[p].appendChild(newHeadng);
                            //tr2[i].insertBefore(newHeadng, tr2[i].children[insertAfters]);
                        }
                    }
                }
                doc[0].appendChild(tbody);
            }
            else if (event == 'accordion_field') {
                var fieldtype;
                const elementAccordion = element.getElementsByClassName("droppable");
                elementAccordion[0].innerHTML = '';
                const elementAppend: HTMLDivElement = this.renderer.createElement('div');
                var formKey = this.newObject["formData"][label].field_properties[0].inputs_fields;
                for (var keys in formKey) {
                    for (let value of Object.values(this.fieldhtml)) {
                        fieldtype = formKey[keys].field_properties[0].field_type
                        elementAppend.innerHTML = value[this.mapforComponent[fieldtype]];
                        elementAccordion[0].appendChild(elementAppend);
                    }
                }
            }
            // set label/id/name from every component 
            if (event) {
                // declare necessary variables
                var element1 = "", field_type = "", element22, element2, eleemnt, element3, count = this.tableDataCount, cellArray = new Array();
                // recursion code to set label name for evry component
                function getText(node, tableDataCount, cls, cls1, cls2, label1) {
                    if (node.nodeName.toLowerCase() == 'label' || // common
                        node.nodeName.toLowerCase() == 'select' || node.nodeName.toLowerCase() == 'textarea' || node.nodeName.toLowerCase() == 'input' ||
                        node.nodeName.toLowerCase() == 'p' || (node.classList != undefined && node.classList.length > 0 && ((node.classList).contains(cls) || (node.classList).contains(cls1) || (node.classList).contains(cls2))) || node.nodeName.toLowerCase() == 'input' || node.nodeName.toLowerCase() == 'textarea' || node.nodeName.toLowerCase() == 'select' || // for static component 
                        node.nodeName.toLowerCase() == 'th' || node.nodeName.toLowerCase() == 'td' // for table
                    ) {
                        // for static component
                        if (event == 'heading_field' || event == 'paragraph_field' || event == "divder_field" || event == 'upload_button' || event == 'input_range') {
                            if (node.nodeName.toLowerCase() == 'label' && event != 'line_break') {
                                if (event == 'upload_button') {
                                    element1 = label1;
                                    node.id = element1;
                                }
                                else if (event == 'input_range') {
                                    element1 = label1;
                                    node.id = element1;
                                }
                                else {
                                    element1 = label1;
                                    node.id = element1;
                                    node.firstChild.innerText = element1;
                                }
                            }
                            if (node.nodeName.toLowerCase() == 'p') {
                                element1 = label1;
                                node.id = element1;
                            }
                        }
                        // for table
                        if (event == 'table_field') {
                            if (node.nodeName.toLowerCase() == 'label') {
                                node.firstChild.innerText = label1;
                                eleemnt = node.firstChild.innerText;
                            }
                            if (node.nodeName.toLowerCase() == 'th') {
                                cellArray.push(node);
                            }
                            if (node.nodeName.toLowerCase() == 'td') {
                                cellArray.push(node);
                                count = node.id;
                            }
                        }
                        // for other component
                        if (event != "table_field" && event != 'heading_field' && event != 'paragraph_field' && event != "divder_field" && event != 'line_break' && event != 'upload_button' && event != 'input_range') {
                            if (node.nodeName.toLowerCase() == 'label') {
                                if (node.textContent != 'Radio' && node.textContent != 'checkbox' && node.textContent != "Approval Checkbox" && node.textContent != "") {
                                    node.firstChild.innerText = label1;
                                    element2 = node.firstChild.innerText;
                                }
                            }
                            if (node.nodeName.toLowerCase() == 'label' && node.textContent == "Approval Checkbox") {
                                element2 = label1;
                            }
                            if (node.nodeName.toLowerCase() == 'input' && node.type == 'button') {
                                if (node.id == 'approvalButton') {
                                    element3 = node;
                                }
                                element2 = label1;
                            }
                            // if (node.nodeName.toLowerCase() == 'input' && node.type == 'checkbox' && node.id == 'checkbox') {
                            //     element2 = label1;
                            // }
                            if (node.nodeName.toLowerCase() == 'input' || node.nodeName.toLowerCase() == 'textarea' || node.nodeName.toLowerCase() == 'select') {
                                node.name = element2;
                            }
                            if (node.classList.contains(cls1)) {
                                node.firstChild.innerText = label1;
                                element2 = node.firstChild.innerText;
                            }
                            if (node.classList.contains(cls2)) {
                                node.firstChild.innerText = label1;
                                element2 = node.firstChild.innerText;
                                node.firstChild.href = '#' + node.firstChild.innerText;
                                node.parentNode.nextSibling.id = node.firstChild.innerText;
                            }
                        }
                        // edit common function
                        if (node.classList != undefined && node.classList.length > 0 && (node.classList).contains(cls)) {
                            element22 = node;
                        }
                    }
                    else {
                        for (let child of node.childNodes)
                            getText(child, tableDataCount, cls, cls1, cls2, label1)
                    }
                }
                getText(element, this.tableDataCount, 'editdelete', 'fieldLabel', 'panel-title', label);
                // set approval button bi-default false
                if (element3) {
                    this.approvalButton = false;
                }
                // set active element for every component
                var commonElement;
                if (event == 'table_field') {
                    commonElement = eleemnt;
                    // Increment table cells counter for next batch(i.e for more tables)
                    count = count.replace(/^\D+/g, '');
                    if (this.tableDataCount >= 0) {
                        this.tableDataCount = (count - 1);
                    }
                    else {
                        this.tableDataCount += (count - 1);
                    }
                    this.tableDataCount += 2;
                }
                else if (event == 'heading_field' || event == 'paragraph_field' || event == "divder_field" || event == 'line_break' || event == 'upload_button' || event == 'input_range') {
                    commonElement = element1;
                }
                else {
                    commonElement = element2;
                }
                // store every element name into array
                this.labelArray.push(commonElement);
                // add edit function on edit button on every component
                if (element22 != undefined) {
                    element22["firstChild"]["onclick"] = this.selectInputFieldForBinding(commonElement);
                    element22["firstChild"].addEventListener("click", (event: Event) => {
                        this.selectInputFieldForBinding(commonElement);
                    });
                    element22["children"][1].addEventListener("click", (event: Event) => {
                        this.deDelectInputFieldForBinding(commonElement);
                    });
                }
                // add edit function on table cells 
                var inputCounter = 0;
                for (var f = 0; f < cellArray.length; f++) {
                    cellArray[f].addEventListener("click", (event: Event) => {
                        this.selectInputFieldForBinding(event.target["id"]);
                    });
                    if (cellArray[f].nodeName.toLowerCase().indexOf('td') != -1) {
                        if (cellArray[f].children.length > 0) {

                            var inputName = this.newObject["formData"][label].field_properties[0].table_fields[inputCounter].td_data[0].label.name;
                            getText(cellArray[f].firstChild, '', 'editdelete', 'fieldLabel', 'panel-title', inputName);
                            element22["firstChild"].removeEventListener("click", this.selectInputFieldForBinding(""));
                            element22["firstChild"].addEventListener("click", (event: Event) => {
                                this.selectInputFieldForBinding(inputName);
                            });
                        }
                        inputCounter += 1;
                    }
                }
            }
            // apppend child inside table
            if (this.getTableInputName != null) {
                if (this.getTableInputName.indexOf('Data') != -1) {
                    var xpath1 = "//*[@id='" + this.getTableInputName + "']";
                    this.matchingElementNew = document.evaluate(xpath1, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                    if (this.matchingElementNew) {
                        if (this.matchingElementNew.children.length > 0) {
                            alert('remove first');
                        }
                        else {
                            this.matchingElementNew.innerHTML = '';
                            this.matchingElementNew.appendChild(element);
                        }
                        var lengthofTableField = this.formData[this.tableName]["field_properties"][0]["table_fields"].length;
                        for (var g = 0; g < lengthofTableField; g++) {
                            if (this.formData[this.tableName]["field_properties"][0]["table_fields"][g]["td_text"] == this.getTableInputName) {
                                this.formData[this.tableName]["field_properties"][0]["table_fields"][g]["td_data"] = new Object();
                                this.formData[this.tableName]["field_properties"][0]["table_fields"][g]["td_data"] = this.getComponenetJson(this.formData[this.tableName]["field_properties"][0]["table_fields"][g]["td_data"], this.getTableInputName, field_type, cellArray);
                            }
                        }
                    }
                    console.log(this.getTableInputName);
                    document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
                }
            }
            // append child outside table
            else {
                this.renderer.appendChild(this.div.nativeElement, element);
            }
        }
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);

    }
    // code for edit form not having ID
    showFields(event) {
        // for(let i = 0; i <= this.fieldhtml.length; i++){
        //     console.log(this.fieldhtml)

        //   }
        // var k = JSON.stringify(this.fieldhtml);
        // var l = JSON.parse(k);
        // console.log(l)
        // console.log(k)
        const element: HTMLDivElement = this.renderer.createElement('div');
        for (let value of Object.values(this.fieldhtml)) {
            // console.log(value[event]);
            // this.htmlcode = this.sanitized.bypassSecurityTrustHtml(value[event]);
            //this.renderer.appendChild(this.div.nativeElement, this.htmlcode)
            element.innerHTML = value[event];

            // adding necessary classes to component
            element.classList.add('draggable', 'width100');

            // making component active by passing 'active' class
            const container1 = document.getElementById('dropzone');
            const inputs = container1.getElementsByClassName('form-group');
            for (var f = 0; f < inputs.length; f++) {
                inputs[f].classList.remove('active');
            }
            if (event == 'table_field') {
                element.children[0]["children"][1]["children"][0]["children"][0]["children"][0].classList.add('active');
            }
            else {
                element.children[0].classList.add('active');
            }
            // making component draggable
            const component = this;

            $(function () {
                $(".draggable").draggable({
                    scroll: 'true',
                    refreshPositions: true,
                    opacity: 1,
                    snapMode: "inner",
                    containment: ".sortable",
                    connectToSortable: ".sortable",
                    // drag: function (event, ui) {
                    // }
                });
                $(".sortable").sortable({
                    helper: "ui-resizable-helper",
                    sort: true,
                    scroll: true,
                    animation: 100,
                    draggable: '.list-group-item',
                });
                $(".droppable").droppable({
                    drop: function (event, ui) {
                        $(this).addClass("ui-state-highlight")
                        component.setJson(event, ui.draggable)
                    },
                    out: function (event, ui) {
                        ui.draggable.animate({
                        }).draggable("destroy")
                    }
                });
            });
            // set label/id/name from every component 
            if (event) {
                // declare necessary variables
                var element1 = "", field_type = "", element22, element2, eleemnt, element3, count = this.tableDataCount, cellArray = new Array();
                // recursion code to set label name for evry component
                function getText(node, counter, counter1, counter2, tableDataCount, cls, cls1, cls2) {
                    if (node.nodeName.toLowerCase() == 'label' || // common
                        node.nodeName.toLowerCase() == 'select' || node.nodeName.toLowerCase() == 'textarea' || node.nodeName.toLowerCase() == 'input' ||
                        node.nodeName.toLowerCase() == 'p' || (node.classList != undefined && node.classList.length > 0 && ((node.classList).contains(cls) || (node.classList).contains(cls1) || (node.classList).contains(cls2))) || node.nodeName.toLowerCase() == 'input' || node.nodeName.toLowerCase() == 'textarea' || node.nodeName.toLowerCase() == 'select' || // for static component 
                        node.nodeName.toLowerCase() == 'th' || node.nodeName.toLowerCase() == 'td' // for table
                    ) {
                        // for static component
                        if (event == 'heading_field' || event == 'paragraph_field' || event == "divder_field" || event == 'upload_button' || event == 'input_range' || event == 'line_break') {
                            if (node.nodeName.toLowerCase() == 'label' && event != 'line_break') {
                                if (event == 'upload_button') {
                                    element1 = 'upload_button' + '_' + counter1;
                                    node.id = element1;
                                }
                                else if (event == 'input_range') {
                                    element1 = 'input_range' + '_' + counter1;
                                    node.id = element1;
                                }
                                else {
                                    element1 = node.firstChild.innerText.replace(/ /g, "_") + '_' + counter1;
                                    node.id = element1;
                                    node.firstChild.innerText = element1;
                                    field_type = event;
                                }
                            }
                            if (node.nodeName.toLowerCase() == 'input' || node.nodeName.toLowerCase() == 'textarea' || node.nodeName.toLowerCase() == 'select') {
                                if (field_type == null || field_type == "") {
                                    field_type = node.type;
                                }
                            }
                            if (node.nodeName.toLowerCase() == 'p') {
                                if (node.parentNode.id == 'divder_field') {
                                    element1 = 'divider_field' + counter1;
                                }
                                else if (node.parentNode.id == 'line_break') {
                                    element1 = 'line_break' + counter1;
                                }
                                node.id = element1;
                                field_type = event;
                            }
                        }
                        // for table
                        if (event == 'table_field') {
                            if (node.nodeName.toLowerCase() == 'label') {
                                field_type = 'table';
                                node.firstChild.innerText = node.firstChild.innerText.replace(/ /g, "_") + '_' + counter2;
                                eleemnt = node.firstChild.innerText;
                            }
                            if (node.nodeName.toLowerCase() == 'th') {
                                element1 = node.innerText.replace(/ /g, "_") + count;
                                cellArray.push(node);
                                node.id = element1;
                                count += 1;
                            }
                            if (node.nodeName.toLowerCase() == 'td') {
                                element1 = node.innerText.replace(/ /g, "_") + count;
                                cellArray.push(node);
                                node.id = element1;
                                count += 1;
                            }
                        }
                        // for other component
                        if (event != "table_field" && event != 'heading_field' && event != 'paragraph_field' && event != "divder_field" && event != 'line_break' && event != 'upload_button' && event != 'input_range') {
                            if (node.nodeName.toLowerCase() == 'label') {
                                if (node.textContent != 'Radio' && node.textContent != 'checkbox' && node.textContent != "Approval Checkbox" && node.textContent != "") {
                                    node.firstChild.innerText = node.firstChild.innerText.replace(/ /g, "_") + '_' + counter;
                                    element2 = node.firstChild.innerText;
                                }
                            }
                            if (node.nodeName.toLowerCase() == 'label' && node.textContent == "Approval Checkbox") {
                                element2 = 'Approval_Checkbox' + counter;
                                field_type = 'Approval checkbox';

                            }
                            if (node.nodeName.toLowerCase() == 'input' && node.type == 'button') {
                                if (node.id == 'approvalButton') {
                                    element3 = node;
                                    field_type = 'Approval Button';
                                }
                                element2 = 'Button_' + counter;
                            }
                            if (node.nodeName.toLowerCase() == 'input' && node.type == 'checkbox' && node.id == 'checkbox') {
                                field_type = node.type;
                                element2 = 'Checkbox_' + counter;
                            }
                            if (node.nodeName.toLowerCase() == 'input' || node.nodeName.toLowerCase() == 'textarea' || node.nodeName.toLowerCase() == 'select') {
                                node.name = element2;
                                if (field_type == null || field_type == "") {
                                    field_type = node.type;
                                }
                            }
                            if (node.classList.contains(cls1)) {
                                node.firstChild.innerText = node.firstChild.innerText.replace(/ /g, "_") + '_' + counter;
                                element2 = node.firstChild.innerText;
                            }
                            if (node.classList.contains(cls2)) {
                                node.firstChild.innerText = node.firstChild.innerText.replace(/ /g, "_") + '_' + counter;
                                element2 = node.firstChild.innerText;
                                node.firstChild.href = '#' + node.firstChild.innerText;
                                node.parentNode.nextSibling.id = node.firstChild.innerText;
                                field_type = 'collapse';
                            }
                        }
                        // edit common function
                        if (node.classList != undefined && node.classList.length > 0 && (node.classList).contains(cls)) {
                            element22 = node;
                        }
                    }
                    else {
                        for (let child of node.childNodes)
                            getText(child, counter, counter1, counter2, tableDataCount, cls, cls1, cls2)
                    }
                }
                getText(element, this.counter, this.counter1, this.counter2, this.tableDataCount, 'editdelete', 'fieldLabel', 'panel-title');
                // set approval button bi-default false
                if (element3) {
                    this.approvalButton = false;
                }
                // set active element for every component
                var commonElement;
                if (event == 'table_field') {
                    commonElement = eleemnt;
                    this.counter2 += 1;
                    // Increment table cells counter for next batch(i.e for more tables)
                    if (this.tableDataCount >= 0) {
                        this.tableDataCount = (count - 1);
                    }
                    else {
                        this.tableDataCount += (count - 1);
                    }
                    this.tableDataCount += 1;
                }
                else if (event == 'heading_field' || event == 'paragraph_field' || event == "divder_field" || event == 'line_break' || event == 'upload_button' || event == 'input_range') {
                    commonElement = element1;
                    this.counter1 += 1;
                }
                else {
                    commonElement = element2;
                    this.counter += 1;
                }
                // store every element name into array
                this.labelArray.push(commonElement);
                // add edit function on edit button on every component
                if (element22 != undefined) {
                    element22["firstChild"]["onclick"] = this.selectInputFieldForBinding(commonElement);
                    element22["firstChild"].addEventListener("click", (event: Event) => {
                        this.selectInputFieldForBinding(commonElement);
                    });
                    element22["children"][1].addEventListener("click", (event: Event) => {
                        this.deDelectInputFieldForBinding(commonElement);
                    });
                }
                // add edit function on table cells of first two default rows
                for (var f = 0; f < cellArray.length; f++) {
                    cellArray[f].addEventListener("click", (event: Event) => {
                        this.selectInputFieldForBinding(event.target["id"]);
                    });
                }
            }
        }
        // apppend child inside table
        if (this.getTableInputName != null) {
            if (this.getTableInputName.indexOf('Data') != -1) {
                var xpath1 = "//*[@id='" + this.getTableInputName + "']";
                this.matchingElementNew = document.evaluate(xpath1, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                if (this.matchingElementNew) {
                    if (this.matchingElementNew.children.length > 0) {
                        alert('remove first');
                    }
                    else {
                        this.matchingElementNew.innerHTML = '';
                        this.matchingElementNew.appendChild(element);
                        var lengthofTableField = this.formData[this.tableName]["field_properties"][0]["table_fields"].length;
                        for (var g = 0; g < lengthofTableField; g++) {
                            if (this.formData[this.tableName]["field_properties"][0]["table_fields"][g]["td_text"] == this.getTableInputName) {
                                this.formData[this.tableName]["field_properties"][0]["table_fields"][g]["td_data"] = new Object();
                                this.formData[this.tableName]["field_properties"][0]["table_fields"][g]["td_data"] = this.getComponenetJson(this.formData[this.tableName]["field_properties"][0]["table_fields"][g]["td_data"], this.getTableInputName, field_type, cellArray);
                            }
                        }
                    }
                }
                console.log(this.getTableInputName);
                document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
            }
        }
        // append child outside table
        else {
            this.renderer.appendChild(this.div.nativeElement, element);
        }

        // setting json to object on initialization of component by calling function
        this.newObject["formData"] = this.formData;
        if (this.getInputName && !(this.getTableInputName != undefined && this.getTableInputName.indexOf('Data') != -1)) {
            this.getComponenetJson(this.formData, this.getInputName, field_type, cellArray);
            this.labelText = this.getInputName.replace(/[-_]/g, ' ');
            this.testObject1[this.labelText] = this.getInputName;
            this.arrayForSelectOptions = [];
            this.arrayForSelectOptions.splice(0, this.arrayForSelectOptions.length)
            this.arrayForSelectOptionss = [];
            this.arrayForSelectOptionss.splice(0, this.arrayForSelectOptionss.length)
            document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        }
    }
    // Making json for every component
    getComponenetJson(tableDataObj: any, getTableInputName: any, field_type: string, array: any): any {
        tableDataObj[getTableInputName] = new Object();
        tableDataObj[getTableInputName]["tooltips"] = new Array();
        tableDataObj[getTableInputName]["tooltips"].push({ visibility: '', text_heading: '', text_description: '' });
        tableDataObj[getTableInputName]["label"] = { name: this.getInputName, DisplayName: this.getInputName.replace(/[-_]/g, ' '), hidden: false, css_attribute: new Object() };
        tableDataObj[getTableInputName]["validation_properties"] = { RegExp: '', fileTypes: '', fileSize: '', type_validation: '', type_validation_operator: '', type_validation_text: '', type_validation_parent: '', Validators_maxLength: '', Validators_minLength: '', defaultDateMin: '', minDate: '', defaultDateMax: '', maxDate: '', defaultDate: '', currentDate: '', NoWhitespaceValidator: false, others: '' };
        tableDataObj[getTableInputName]["field_properties"] = new Array();
        if (field_type == 'table') {
            tableDataObj[getTableInputName]["field_properties"].push({ placeholder: '', field_type: field_type, field_type_html: "", css_attribute: new Object(), no_column: 2, no_rows: 2, header: new Array(), table_fields: new Array() });
            tableDataObj[getTableInputName]["field_properties"][0]["header"].push({ header_text: array[0].id, header_child: new Array() }, { header_text: array[1].id, header_child: new Array() });
            tableDataObj[getTableInputName]["field_properties"][0]["table_fields"].push({ td_type: '', td_text: array[2].id, td_data: new Array() }, { td_type: '', td_text: array[3].id, td_data: new Array() });
        }
        else if (field_type == 'collapse') {
            this.formData[this.getInputName]["field_properties"].push({ placeholder: '', field_type: field_type, field_type_html: "", css_attribute: new Object(), inputs_fields: undefined });
        }
        else {
            tableDataObj[getTableInputName]["field_properties"].push({ placeholder: '', field_type: field_type, field_type_html: "", css_attribute: new Object() });
        }
        tableDataObj[getTableInputName]["generic_properties"] = new Array();
        tableDataObj[getTableInputName]["generic_properties"].push({ required: false, required_msg: "", read_only: false });
        tableDataObj[getTableInputName]["dependency_attributes"] = { bindingRelation: '', dependent: false, relation_type: '', parent_field: '', binding_column: '', db_table: '', db_table_column: '', depedency_on: '', display_column: '', fetch_columns: '', perform_action: '', thirdParty_attributes: new Array(), options: new Array() };
        tableDataObj[getTableInputName]["grid_system"] = new Array();
        tableDataObj[getTableInputName]["grid_system"].push({ width: "col-md-12" });
        this.labelText = getTableInputName;
        this.setWidths = 'col-md-12';
        return tableDataObj;
    }
    // cr_bci_0001 end

    //calculator code 
    setcalculateField() {
        this.Cal_FieldArray = [];
        const tmpArrayfields = [];
        tmpArrayfields.push(this.formData);
        for (let i = 0; i < tmpArrayfields.length; i++) {
            for (var key in tmpArrayfields[i]) {
                const Fields = tmpArrayfields[i][key].label.DisplayName;
                this.Cal_FieldArray.push({ Displayfieldnames: Fields });
            }
        }
    }
    getFeilds(event: any) {
        if (event == '' || event == null || event == undefined) {
            alert(' Please select the field')
        }
        else {
            this.Cal_field.push(event);
            if (this.Cal_field.length == 1) {
                this.Cal_Formula = this.Cal_Formula + this.Cal_field[0];
            }
            else {
                this.Cal_Formula = '';
                for (var i = 0; i < this.Cal_field.length; i++) {
                    if (this.Cal_Formula == '') {
                        this.Cal_Formula = this.Cal_Formula + this.Cal_field[i];
                    }
                    else {
                        this.Cal_Formula = this.Cal_Formula + '+' + this.Cal_field[i];
                    }
                }
            }
        }
    }
    getOperators(event: any) {
        if (event == '' || event == null || event == undefined) {
            alert(' Please select the operator')
        }
        else {
            this.Cal_operator = event;
            this.Cal_Formula = '(' + this.Cal_Formula + ')' + this.Cal_operator;
            console.log(this.Cal_Formula);
        }
    }
    getCalVal(event: any) {
        console.log(event)
        if (event == '' || event == null || event == undefined) {
            alert('Enter the value 1');
        }
        else {
            this.Cal_value = event.trim();
            this.Cal_Formula = this.Cal_Formula + this.Cal_value;
            console.log(this.Cal_Formula);
        }

    }
    Calculator() {
        if (this.newObject["formData"][this.getInputName]["validation_properties"]) {
            this.newObject["formData"][this.getInputName]["validation_properties"]["formula"] = this.Cal_Formula;
        }
        document.getElementById('output2').textContent = JSON.stringify(this.newObject, undefined, 2);
        this.clearInput();
    }
    clearInput() {
        this.Calfields.nativeElement.value = '';
        this.caloperators.nativeElement.value = '';
        this.calvalue.nativeElement.value = '';
        this.Cal_field = [];
        this.Cal_operator = null;
        this.Cal_value = null;
        this.Cal_value2 = null;
        this.Cal_Formula = '';
    }
}