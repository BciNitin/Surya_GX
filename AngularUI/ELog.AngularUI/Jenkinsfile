// Powered by Infostretch 
def destroyInfra = true
def DefbuildTag = 'Latest'
pipeline {
    agent any
  parameters {
    string (name: 'MASTER_NODE_IP')
    string (name: 'BuildTag', defaultValue: 'Latest', description: 'Provide build number, Latest will be used by default')
    string (name: 'DockerHubUrl', defaultValue: '19913011', description: 'Docker hub URL')
    string (name: 'DockerRepoName', defaultValue: 'pmmsrepo', description: 'Docker hub repo name')
     choice(
        name: 'Action',
        choices: "Build and Deploy\nBuild Only\nDeploy Only",
        description: 'Build and Deploy will create new image and deploy' )
  }
  environment {
    MASTER_NODE_IP = "${params.MASTER_NODE_IP}"
    UserBuildTag = "${params.BuildTag}"
  }

  stages {
 
	stage('Build image') {
        // This builds the actual image; synonymous to
        // * docker build on the command line
             when{
            expression {
                return "${params.Action}" == 'Build Only' || "${params.Action}" == 'Build and Deploy';
            }
        }
        steps {

            script{
            app = docker.build("${params.DockerHubUrl}/${params.DockerRepoName}","-f AngularUI/PMMSAngular.AngularUI/Dockerfile .")
            }
            }
    }
    
    stage('Push image') {
        // Finally, we'll push the image with two tags:
        // First, the incremental build number from Jenkins
        // Second, the 'latest' tag.
        // Pushing multiple tags is cheap, as all the layers are reused.
         when{
            expression {
                return "${params.Action}" == 'Build Only' || "${params.Action}" == 'Build and Deploy';
            }
        }
        steps {
         script{   
        docker.withRegistry('https://registry.hub.docker.com', 'dockercreadentials') {
            app.push("angular-${env.BUILD_NUMBER}")
            app.push("angular-latest")
        }
        }
        }
    }

    stage('Docker Deploy'){
         when{
                expression {
                    return "${params.Action}" == 'Deploy Only' || "${params.Action}" == 'Build and Deploy';
                }
            }
           steps { 
               script{
            node {
                    DefbuildTag = UserBuildTag
                    if (UserBuildTag == 'Latest'){
                        DefbuildTag = "${env.BUILD_NUMBER}"
                    }
                    
                def remote = [:]
                    remote.name = "CopyFile"
                    remote.host = MASTER_NODE_IP
                    remote.allowAnyHosts = true

                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'kubernetes-sshkey', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName'),
                        usernamePassword(credentialsId: 'dockercreadentials', usernameVariable: 'dockerUser', passwordVariable: 'dockerPassword')
                        ]) {
                        remote.user = userName
                        remote.identityFile = identity
                        stage("SSH Steps") {
                        sshPut remote: remote, from: "${WORKSPACE.replaceAll("@2", "").replaceAll("@3", "")}/AngularUI/PMMSAngular.AngularUI/splatform-angular-deployment.yaml", into: '.'
                        sshPut remote: remote, from: "${WORKSPACE.replaceAll("@2", "").replaceAll("@3", "")}/AngularUI/PMMSAngular.AngularUI/angular-deployment.sh", into: '.'
                        sshCommand remote: remote, command: "sudo bash angular-deployment.sh '${dockerUser}' '${dockerPassword}' ${DefbuildTag} '${params.DockerHubUrl}' '${params.DockerRepoName}'"
                    }
                }
            }
            }
           }
        }
    }
  }
